-- phpMyAdmin SQL Dump
-- version 4.7.3
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: Aug 13, 2018 at 11:14 AM
-- Server version: 5.5.56-log
-- PHP Version: 7.1.7

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `symfony_blog`
--

-- --------------------------------------------------------

--
-- Table structure for table `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `descript` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `thumb` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime DEFAULT NULL,
  `content` longtext COLLATE utf8mb4_unicode_ci,
  `category_id` int(11) DEFAULT NULL,
  `views` int(11) DEFAULT NULL,
  `is_comment` tinyint(1) NOT NULL,
  `status` tinyint(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `article`
--

INSERT INTO `article` (`id`, `title`, `descript`, `thumb`, `created_at`, `updated_at`, `content`, `category_id`, `views`, `is_comment`, `status`) VALUES
(1, '【doctrine】symfony4如何使用分页功能', 'symfony中通过knp组件实现分页', NULL, '2018-07-04 14:00:53', NULL, '为了记录symfony4的学习过程，首先准备了后台的文章管理系统，通过一系列的准备工作，比如选择编辑器等；另外就是先解决文章的分页功能，在这儿通过使用knp分页组件完成；<blockquote>composer require &quot;knplabs/knp-paginator-bundle&quot; &nbsp;</blockquote><blockquote><code>$qb</code> <code>=&nbsp;</code><code>$em</code><code>-&gt;getRepository(</code><code>&#39;AppBundle:DemoList&#39;</code><code>)-&gt;createQueryBuilder(</code><code>&#39;u&#39;</code><code>);</code><br><code>$paginator</code> <code>=&nbsp;</code><code>$this</code><code>-&gt;get(</code><code>&#39;knp_paginator&#39;</code><code>);</code><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><br><code>$pagination</code> <code>=&nbsp;</code><code>$paginator</code><code>-&gt;paginate(</code><code>$qb</code><code>,&nbsp;</code><code>$page</code><code>,</code><code>$limit</code><code>);</code><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code> <code>&nbsp; &nbsp; &nbsp;&nbsp;</code><br><code>return</code> <code>$this</code><code>-&gt;render(</code><code>&#39;&#39;</code><code>,[</code><code>&#39;pagination&#39;</code> <code>=&gt;&nbsp;</code><code>$pagination</code><code>]);</code>&nbsp;</blockquote><blockquote><code>{% for value in pagination %}</code><br><code>{{value.title}}{#直接就是值了#}</code><br><code>{% endfor %}</code><br><code>{{ knp_pagination_render(pagination) }}</code> </blockquote>', 1, 0, 1, 1),
(2, '【form】上传文件', '上传文件', NULL, '2018-07-04 15:20:46', NULL, '<p>可以考虑<font><font>可以考虑使用</font></font><font><font><a href=\"https://github.com/dustin10/VichUploaderBundle\">VichUploaderBundle</a>组件</font></font></p><p>手动处理分两种 ，一个是控制器里直接处理，一个是注册服务，控制器引用处理</p><p>一、控制器处理</p><p>1、Entity里引入 use Symfony\\Component\\Validator\\Constraints as Assert;</p><p>2、定义字段 @Assert\\File(mimeTypes={\"image/png\",\"image/jpeg\"})</p><p>3、表单类Form 引入字段 -&gt;add(\"file\",FileType::class),编辑的时候可以加上参数[\'data_class\'=&gt;null,],否则会报错</p><p>4、新增提交后处理</p><blockquote><p>$file = $form-&gt;get(\'thumb\')-&gt;getData();</p><p>if($file !== null){</p><p style=\"margin-left: 40px;\">	$fileName = $this-&gt;generateUniqueFileName().\'.\'.$file-&gt;guessExtension();</p><p style=\"margin-left: 40px;\">	// moves the file to the directory where brochures are stored</p><p style=\"margin-left: 40px;\">	$file-&gt;move(</p><p style=\"margin-left: 80px;\">		$this-&gt;getParameter(\'upload_path\'),</p><p style=\"margin-left: 80px;\">		$fileName</p><p style=\"margin-left: 40px;\">	);</p><p style=\"margin-left: 40px;\">	$article-&gt;setThumb($fileName);</p><p style=\"margin-left: 40px;\">$article = $form-&gt;getData();</p><p style=\"margin-left: 40px;\">//入库</p><p>}</p></blockquote><p style=\"margin-left: 40px;\"><br></p><p><br></p><p>5、设置上传路径参数&nbsp; app\\config\\service.yaml</p><pre><code><span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">parameters</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span>\r\n    <span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">upload_path</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span> <span class=\"s\" style=\"box-sizing: border-box; color: rgb(86, 219, 58);\">\'%kernel.project_dir%/public/uploads\'</span></code></pre><p>6、保存到数据库即可</p><p>二、服务</p><p>1、定义服务类&nbsp;</p><pre><code class=\"lang-php\">// src/Service/FileUploader.php\r\nnamespace App\\Service;\r\n\r\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\r\n\r\nclass FileUploader\r\n{\r\n&nbsp; &nbsp; private $targetDirectory;\r\n\r\n&nbsp; &nbsp; public function __construct($targetDirectory)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;targetDirectory = $targetDirectory;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function upload(UploadedFile $file)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $fileName = md5(uniqid()).\'.\'.$file-&gt;guessExtension();\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; $file-&gt;move($this-&gt;getTargetDirectory(), $fileName);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $fileName;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function getTargetDirectory()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;targetDirectory;\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p>2、注册服务</p><pre><code class=\"lang-php\"><span class=\"c1\" style=\"box-sizing: border-box; color: rgb(183, 41, 217); font-style: italic;\"># config/services.yaml</span>\r\n<span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">services</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span>\r\n    <span class=\"c1\" style=\"box-sizing: border-box; color: rgb(183, 41, 217); font-style: italic;\"># ...</span>\r\n\r\n    <span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">App\\Service\\FileUploader</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span>\r\n        <span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">arguments</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span>\r\n            <span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">$targetDirectory</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span> <span class=\"s\" style=\"box-sizing: border-box; color: rgb(86, 219, 58);\">\'%upload_path%\'\r\n\r\n</span></code></pre><p>3、控制器里使用&nbsp;</p><p>use App\\Service\\FileUploader</p><p>public function add(Request,$request,FileUploader $fileuploader)</p><p>{</p><p style=\"margin-left: 40px;\">//服务上传</p><p style=\"margin-left: 40px;\">$file = $form-&gt;get(\'thumb\')-&gt;getData();</p><p style=\"margin-left: 40px;\">if(null !== $file){</p><p style=\"margin-left: 80px;\">	$fileName = $fileUploader-&gt;upload($file);</p><p style=\"margin-left: 80px;\">	$article-&gt;setThumb($fileName);</p><p style=\"margin-left: 40px;\">}</p><p style=\"margin-left: 40px;\">$article = $form-&gt;getData();</p><p style=\"margin-left: 40px;\">//入库</p><p>}</p>', 1, 0, 1, 1),
(3, '超实用的Excel导出', '超实用的Excel导出', NULL, '2018-07-04 15:25:55', NULL, '<blockquote><p>public function get_20wan()<br>&nbsp;{<br>&nbsp;&nbsp;$users = M(\'user\')-&gt;order(\'id asc\')-&gt;select();<br>&nbsp;&nbsp;$str&nbsp; = \'&lt;html&gt;\';<br>&nbsp;&nbsp;$str .= \'&lt;head&gt;\';<br>&nbsp;&nbsp;$str .= \'&lt;meta http - equiv = \"Content-Type\" content = \"text/html; charset=utf-8\" &gt; \';<br>&nbsp;&nbsp;$str .= \'&lt;/head &gt; \';<br>&nbsp;&nbsp;$str .= \'&lt;body &gt; \';<br>&nbsp;&nbsp;$str .= \'&lt;table border = \"1\" align = \"center\" cellspacing = \"1\" cellpadding = \"1\" &gt; \';<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;$str .= \'&lt;tr align = \"center\" &gt; \';<br>&nbsp;&nbsp;$str .= \'&lt;td nowrap &gt;&lt;b &gt; 手机号&lt;/b &gt;&lt;/td &gt; &lt;td nowrap &gt;&lt;b &gt; 业绩&lt;/b &gt;&lt;/td &gt;\';<br>&nbsp;&nbsp;$str .= \'&lt;/tr &gt; \';<br>&nbsp;&nbsp;foreach($users as $user){<br>&nbsp;&nbsp;&nbsp;//获取动态分红的小区业绩<br>&nbsp;&nbsp;&nbsp;$yj = $this-&gt;get_xiaji($user[\'id\']);<br>&nbsp;&nbsp;&nbsp;if(!$yj){ //没有业绩或只有一条线<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;if($yj &gt;=200000){&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;$str .= \'&lt;tr align = \"center\" &gt; \';&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;$str .= \"&lt;td style=\'vnd.ms-excel.numberformat:@\'&gt;\".$user[\'phone\'].\"&lt;/td &gt; &lt;td style=\'vnd.ms-excel.numberformat:@\'&gt;\".$yj.\"&lt;/td &gt; \";<br>&nbsp;&nbsp;&nbsp;&nbsp;$str .= \'&lt;/tr &gt; \';&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;$str .= \'&lt;/table &gt; \';<br>&nbsp;&nbsp;$str .= \'&lt;/body &gt; \';<br>&nbsp;&nbsp;$str .= \'&lt;/html &gt; \';</p><p style=\"margin-left: 0px;\">&nbsp;&nbsp;header(\"cache-control:no-cache,must-revalidate\");<br>&nbsp;&nbsp;header(\"Content-Type:application/vnd.ms-execl\");<br>&nbsp;&nbsp;header(\"Content-Type:application/octet-stream\");<br>&nbsp;&nbsp;header(\"Content-Type:application/force-download\");<br>&nbsp;&nbsp;header(\"Content-Disposition: attachment; filename=\".urlencode(\'业绩大于20w\').\'_\'.date(\'m-d\').\".xls\");<br>&nbsp;&nbsp;header(\'Expires:0\');<br>&nbsp;&nbsp;header(\'Pragma:public\');<br>&nbsp;&nbsp;echo \"\\xFF\\xFE\".mb_convert_encoding( $str, \'UCS-2LE\', \'UTF-8\' );<br>&nbsp;&nbsp;<br>&nbsp;}</p><p><br></p></blockquote>', 4, 0, 1, 1),
(4, 'redis的基本使用', 'redis的基本使用', NULL, '2018-07-05 16:59:27', NULL, '<p>一，字符串 string</p><p>set,get ,getset,mset,mget,incr,incrby,decr,decrby,exists,del,strlen,append</p><p>Redis超时:数据在限定时间内存活,你可以对key设置一个超时时间，当这个时间到达后会被删除。精度可以使用毫秒或秒。set key value ,expire key 5( set key value ex 10)，通过ttl key 返回剩余时间</p><p>二，散列 hash</p><p>hset(insert return 1 update return 0),hget,hmset,hmget,hgetall ,hexists ,hsetnx(不存在才执行)，hincrby,hdel,hkeys,hvals,hlen</p><p>三，列表 list</p><p>lpush,rpush,lpop,rpop,lrange,llen,lrem lrem key count value count = 0 删除所有值为value，count&lt;0 从右边删除count个值为value 返回删除的个数 count&gt;0从左边删除count个值为value返回删除的个数,lindex key index&nbsp; ,lset key index value,linsert key before|after&nbsp;value newvalue 往值为value的前面|后面插newvalue</p><p>四，集合 set</p><p>sadd,sismember,smembers,srem key value [value1...],sdiff key key1差集，sinter key key1 交集,sunion key key1 并集，sdiffstore,sinterstore,sunionstore,scard key 集合中的个数，srandmember key [count] 随机返回集中中count个值，spop key [count],随机弹出一个值</p><p>五，有序集合 sorted set</p><p>zadd key score value,zscore key value 获得key中值为value的score,zrange key start end [withscores] 从小到大获取某个范围的元素列表,zrevrange key start end [withscores]从大到小获取某个范围的元素列表，zrangebyscore key start end [withscores]获取分数在某个范围的元素列表，zincrby key score value增加key中值为value的分数+score,zcard key获取元素的个数,zcount key min max获得指定分数范围内的元素个数，zrem key member删除key中的member,zremrangebyrank key start end按照排名范围删除元素，zremrangebyscore key start end按照分数分为删除元素，zrank key member 获得元素排名（从小到大），zrevrank key member 获得元素排名（从大到小）</p><p>六，事务</p><p style=\"margin-left: 0px;\">multi&nbsp; command... exec,语法错误事务不执行，运行错误事务还是会提交 比如&nbsp; multi&nbsp; set a b lpush a c exec,lpush的a的类型不正确，但是第一条还是会执行；watch命令可以监控一个或多个建，一旦其中一个被修改或删除，之后的事务部会执行，监控一直持续到exec命令。比如 set a b ,watch a set a b1 multi set a b2 exec,此时因执行事务前a被修改成b1了，所以事务里的set a b2不被执行 get a 是b1</p>', 5, 0, 1, 1),
(5, '【setup】安装和设置Symfony框架', '安装和设置Symfony框架，要创建新的Symfony应用程序，首先要确保使用的是PHP 7.1或更高版本并安装了Composer。', NULL, '2018-07-05 21:14:13', NULL, '<p>安装和设置Symfony框架，要创建新的Symfony应用程序，首先要确保使用是PHP 7.1或更高版本并安装了Composer,安装好composer后可以设置中国镜像。<br></p><p>通过运行一下命令下载框架</p><blockquote><p><span style=\"color: rgb(65, 140, 175);\">composer create-project symfony/website-skeleton my-project</span><br></p></blockquote><p>要运行程序，可使用下面命令,访问 127.0.0.1:8000</p><blockquote><p><span style=\"color: rgb(65, 140, 175);\">php bin/console server:run</span><br></p></blockquote><p>或者配置web服务器</p><p>apache2.4配置如下，<font><font>在Apache 2.4中，</font></font><code class=\"notranslate\">Order Allow,Deny</code><font><font>已被替换</font></font><code class=\"notranslate\">Require all granted</code><font><font>。</font><font>因此，您需要修改</font></font><code class=\"notranslate\">Directory</code><font><font>权限设置，如下所示</font></font></p><pre><code class=\"lang-php\"><span class=\"nt\" style=\"box-sizing: border-box; color: rgb(204, 204, 204);\"></span>&lt;VirtualHost *:80&gt;\r\n&nbsp; &nbsp; ServerName domain.tld\r\n&nbsp; &nbsp; ServerAlias www.domain.tld\r\n\r\n&nbsp; &nbsp; DocumentRoot /var/www/project/public\r\n&nbsp; &nbsp; &lt;Directory /var/www/project/public&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; #AllowOverride None\r\n&nbsp; &nbsp; &nbsp; &nbsp; #Order Allow,Deny\r\n&nbsp; &nbsp; &nbsp; &nbsp; #Allow from All\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Require all granted\r\n&nbsp; &nbsp; &nbsp; &nbsp; FallbackResource /index.php\r\n&nbsp; &nbsp; &lt;/Directory&gt;\r\n\r\n&nbsp; &nbsp; # uncomment the following lines if you install assets as symlinks\r\n&nbsp; &nbsp; # or run into problems when compiling LESS/Sass/CoffeeScript assets\r\n&nbsp; &nbsp; # &lt;Directory /var/www/project&gt;\r\n&nbsp; &nbsp; #&nbsp; &nbsp; &nbsp;Options FollowSymlinks\r\n&nbsp; &nbsp; # &lt;/Directory&gt;\r\n\r\n&nbsp; &nbsp; # optionally disable the fallback resource for the asset directories\r\n&nbsp; &nbsp; # which will allow Apache to return a 404 error when files are\r\n&nbsp; &nbsp; # not found instead of passing the request to Symfony\r\n&nbsp; &nbsp; &lt;Directory /var/www/project/public/bundles&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; FallbackResource disabled\r\n&nbsp; &nbsp; &lt;/Directory&gt;\r\n&nbsp; &nbsp; ErrorLog /var/log/apache2/project_error.log\r\n&nbsp; &nbsp; CustomLog /var/log/apache2/project_access.log combined\r\n\r\n&nbsp; &nbsp; # optionally set the value of the environment variables used in the application\r\n&nbsp; &nbsp; #SetEnv APP_ENV prod\r\n&nbsp; &nbsp; #SetEnv APP_SECRET &lt;app-secret-id&gt;\r\n&nbsp; &nbsp; #SetEnv DATABASE_URL \"mysql://db_user:db_pass@host:3306/db_name\"\r\n&lt;/VirtualHost&gt;<span class=\"nt\" style=\"box-sizing: border-box; color: rgb(204, 204, 204);\"></span></code></pre><p>nginx配置如下：</p><blockquote><p>server {</p><p>&nbsp; &nbsp; server_name domain.tld <a href=\"http://www.domain.tld\" rel=\"nofollow\">www.domain.tld</a>;</p><p>&nbsp; &nbsp; root /var/www/project/public;</p><p>&nbsp; &nbsp; location / {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; # try to serve file directly, fallback to index.php</p><p>&nbsp; &nbsp; &nbsp; &nbsp; try_files $uri /index.php$is_args$args;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; location ~ ^/index\\.php(/|$) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; fastcgi_split_path_info ^(.+\\.php)(/.*)$;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; include fastcgi_params;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; fastcgi_param DOCUMENT_ROOT $realpath_root;</p><p>&nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; internal;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; # return 404 for all other php files not matching the front controller</p><p>&nbsp; &nbsp; # this prevents access to other php files you don\'t want to be accessible.</p><p>&nbsp; &nbsp; location ~ \\.php$ {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return 404;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; error_log /var/log/nginx/project_error.log;</p><p>&nbsp; &nbsp; access_log /var/log/nginx/project_access.log;</p><p>}</p></blockquote>', 1, 0, 1, 1),
(6, '【setup】在Symfony中创建您的第一页', '在Symfony中创建您的第一页,创建新页面 - 无论是HTML页面还是JSON端点 - 分为两步：创建一个控制器 创建路由', NULL, '2018-07-05 21:38:39', NULL, '<p>在Symfony中创建您的第一页,创建新页面 - 无论是HTML页面还是JSON端点 - 分为两步：创建一个控制器 创建路由<br></p><p>创建控制器</p><pre><code class=\"lang-php\">&lt;?php\r\n// src/Controller/LuckyController.php\r\nnamespace App\\Controller;\r\n\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass LuckyController\r\n{\r\n&nbsp; &nbsp; public function number()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $number = random_int(0, 100);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return new Response(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'&lt;html&gt;&lt;body&gt;Lucky number: \'.$number.\'&lt;/body&gt;&lt;/html&gt;\'\r\n&nbsp; &nbsp; &nbsp; &nbsp; );\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p>创建路由</p><pre><code># config/routes.yaml\r\n\r\n# the \"app_lucky_number\" route name is not important yet\r\napp_lucky_number:\r\n&nbsp; &nbsp; path: /lucky/number\r\n&nbsp; &nbsp; controller: App\\Controller\\LuckyController::number<br></code></pre><p>此时，访问 127.0.0.1:8000/lucky/number 访问即可</p><p>或通过使用annotation路由设置</p><pre><code>use Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\n...\r\n/**\r\n*@Route(\"/lucky/number\",name=\"app_lucky_number\")\r\n*/\r\npublic function number...</code></pre>', 1, 0, 1, 1),
(7, '【route】路由', 'Symonfy中的路由', NULL, '2018-07-05 21:57:44', NULL, '<pre><code>namespace App\\Controller;\r\nuse Symfony\\Bundle\\FrameWorkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\n&nbsp;&nbsp;/**\r\n&nbsp;&nbsp; * @Route(\"/site\")  //这是前缀定义\r\n &nbsp;&nbsp;*/\r\n&nbsp;&nbsp;class Blog\r\n&nbsp;&nbsp;{  ... }\r\n\r\n   /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/blog/{page}\", name=\"blog_list\",methods={\"GET\",\"POST\"} requirements={\"page\"=\"\\d+\"} or requirements={\"page\":\"\\d+\"})\r\n&nbsp; &nbsp; &nbsp;*/\r\n   /**\r\n     * @Route(\"/blog/{page&lt;\\d+&gt;?1}\", name=\"blog_list\")\r\n     */\r\n&nbsp; &nbsp; public function list($page=1)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n<br></code></pre><p>列出所有路由</p><pre><code>php bin/console debug:router</code></pre><p>控制器里生成url</p><pre><code>$url = $this-&gt;generateUrl(\r\n&nbsp;&nbsp;&nbsp;&nbsp;\'blog_list\',\r\n&nbsp;&nbsp;&nbsp;&nbsp;[\'page\'=&gt;12],\r\n);</code></pre><p>使用查询字符串，当你生成网址的时候多余的参数，将会以查询字符串的形式添加到url上</p><pre><code>$this-&gt;router-&gt;generate(\'blog\', array(\r\n&nbsp; &nbsp; \'page\' =&gt; 2,\r\n&nbsp; &nbsp; \'category\' =&gt; \'Symfony\',\r\n));\r\n// /blog/2?category=Symfony<br></code></pre><p>模板中使用url</p><pre><code>{{ path(\'blog_list\',{\'page\':2}) }}</code></pre>', 1, 0, 1, 1),
(8, '【route】如何将路径中的额外信息传递给控制器', '如何将路径中的额外信息传递给控制器', NULL, '2018-07-05 22:29:33', NULL, '<pre><code># config/routes.yaml\r\nblog:\r\n&nbsp; &nbsp; path:&nbsp; &nbsp; &nbsp; &nbsp;/blog/{page}\r\n&nbsp; &nbsp; controller: App\\Controller\\BlogController::index\r\n&nbsp; &nbsp; defaults:\r\n&nbsp; &nbsp; &nbsp; &nbsp; page: 1\r\n&nbsp; &nbsp; &nbsp; &nbsp; title: \"Hello world!\"<br></code></pre><p><span style=\"color: rgb(24, 23, 27); font-size: 14px;\">现在，您可以在控制器中访问此额外参数，作为控制器方法的参数</span><br></p><pre><code>public function index($page, $title)\r\n{\r\n&nbsp; &nbsp; // ...\r\n}<br></code></pre><p><font><font>或者，可以通过</font></font><code class=\"notranslate\">Request</code><font><font>对象</font><font>访问标题</font></font><br></p><pre><code>use Symfony\\Component\\HttpFoundation\\Request;\r\n\r\npublic function index(Request $request, $page)\r\n{\r\n&nbsp; &nbsp; $title = $request-&gt;attributes-&gt;get(\'title\');\r\n\r\n&nbsp; &nbsp; // ...\r\n}<br></code></pre><p><font><font>如您所见，</font></font><code class=\"notranslate\">$title</code><font><font>变量从未在路径路径中定义，但您仍然可以从控制器内部，方法的参数或</font></font><code class=\"notranslate\">Request</code><font><font>对象的</font></font><code class=\"notranslate\">attributes</code><font><font>包中</font><font>访问其值</font><font>。</font></font><br></p>', 1, 0, 1, 1),
(9, '【route】如何在JavaScript中生成路由URL', '如何在JavaScript中生成路由URL', NULL, '2018-07-05 22:31:21', NULL, '<h1 style=\"margin-left: 0px;\"><font>如何在JavaScript中生成路由URL</font></h1><p><font><font>如果您使用的是Twig模板，则可以使用相同的</font></font><code class=\"notranslate\">path()</code><font><font>函数来设置JavaScript变量。</font><font>该</font></font><code class=\"notranslate\">escape()</code><font><font>函数有助于转义任何非JavaScript安全值：</font></font><br></p><pre><code>&lt;script&gt;\r\nvar route = \"{{ path(\'blog_show\', {\'slug\': \'my-blog-post\'})|escape(\'js\') }}\";\r\n&lt;/script&gt;<br></code></pre><p><font><font>但是，如果您</font></font><font><font>确实</font></font><font><font>需要在纯JavaScript中生成路由，请考虑使用</font></font><a href=\"https://github.com/FriendsOfSymfony/FOSJsRoutingBundle\"><font><font>FOSJsRoutingBundle</font></font></a><font><font>。</font><font>它使以下成为可能：</font></font><br></p><pre><code>&lt;script&gt;\r\nvar url = Routing.generate(\'blog_show\', {\r\n&nbsp; &nbsp; \'slug\': \'my-blog-post\'\r\n});\r\n&lt;/script&gt;<br></code></pre>', 1, 0, 1, 1),
(10, '【route】如何匹配基于主机的路由', '如何匹配基于主机的路由', NULL, '2018-07-05 22:34:29', NULL, '<p><font><font>您还可以</font><font>在传入请求</font><font>的HTTP&nbsp;</font></font><font><font>主机上</font></font><font><font>进行</font><font>匹配</font><font>。</font></font></p><pre><code>// src/Controller/MainController.php\r\nnamespace App\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass MainController extends Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/\", name=\"mobile_homepage\", host=\"m.example.com\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function mobileHomepage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/\", name=\"homepage\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function homepage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n}</code></pre><p><font><font>两条路径匹配相同的路径</font></font><code class=\"notranslate\">/</code><font><font>，但第一</font><font>条路径</font><font>仅在主机匹配时匹配</font></font><code class=\"notranslate\">m.example.com</code><font><font>。</font></font><br></p><pre><code>// src/Controller/MainController.php\r\nnamespace App\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass MainController extends Controller\r\n{\r\n    /**\r\n     * @Route(\"/\", name=\"projects_homepage\", host=\"{project_name}.example.com\")\r\n     */\r\n    public function projectsHomepage()\r\n    {\r\n        // ...\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/\", name=\"homepage\")\r\n     */\r\n    public function homepage()\r\n    {\r\n        // ...\r\n    }\r\n}<br></code></pre><p><font><font>您还可以为这些占位符设置要求和默认选项。</font><font>举例来说，如果你想同时匹配</font></font><code class=\"notranslate\">m.example.com</code><font><font>和</font></font><code class=\"notranslate\">mobile.example.com</code><font><font>，你用这个：</font></font><br></p><pre><code>// src/Controller/MainController.php\r\nnamespace App\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass MainController extends Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;\"/\",\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;name=\"mobile_homepage\",\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;host=\"{subdomain}.example.com\",\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;defaults={\"subdomain\"=\"m\"},\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;requirements={\"subdomain\"=\"m|mobile\"}\r\n&nbsp; &nbsp; &nbsp;* )\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function mobileHomepage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/\", name=\"homepage\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function homepage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p><span style=\"color: rgb(24, 23, 27); font-size: 14px;\">如果您不想对主机名进行硬编码，也可以使用服务参数：</span><br></p><pre><code>// src/Controller/MainController.php\r\nnamespace App\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass MainController extends Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;\"/\",\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;name=\"mobile_homepage\",\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;host=\"m.{domain}\",\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;defaults={\"domain\"=\"%domain%\"},\r\n&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp;requirements={\"domain\"=\"%domain%\"}\r\n&nbsp; &nbsp; &nbsp;* )\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function mobileHomepage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/\", name=\"homepage\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function homepage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // ...\r\n&nbsp; &nbsp; }\r\n}<br></code></pre>', 1, 0, 1, 1),
(11, '【route】如何在路由中使用服务容器参数', '如何在路由中使用服务容器参数', NULL, '2018-07-05 22:37:38', NULL, '<p style=\"margin-left: 0px;\"><font><font>有时您可能会发现使路线的某些部分全局可配置很有用。</font><font>例如，如果您构建国际化站点，则可能从一个或两个语言环境开始。</font><font>当然，您将向路由添加一个要求，以防止用户匹配您支持的语言环境以外的语言环境。</font></font></p><p style=\"margin-left: 0px;\"><font>您</font>可以<code class=\"notranslate\">_locale</code><font><font>在所有路由中</font><font>硬编码您的</font><font>需求，但更好的解决方案是在路由配置中使用可配置的服务容器参数：</font></font></p><pre><code># config/routes.yaml\r\ncontact:\r\n    path:       /{_locale}/contact\r\n    controller: App\\Controller\\MainController::contact\r\n    requirements:\r\n        _locale: \'%app.locales%\'<br></code></pre><p><font><font>您现在可以</font></font><code class=\"notranslate\">app.locales</code><font><font>在容器中的某个位置</font><font>控制和设置&nbsp;</font><font>参数：</font></font><br></p><pre><code># config/services.yaml\r\nparameters:\r\n    app.locales: en|es<br></code></pre><p><span style=\"color: rgb(24, 23, 27); font-size: 14px;\">您还可以使用参数来定义路径路径（或路径的一部分）：</span><br></p><pre><code># config/routes.yaml\r\nsome_route:\r\n    path:       /%app.route_prefix%/contact\r\n    controller: App\\Controller\\MainController::contact<br></code></pre>', 1, 0, 1, 1),
(12, '【security】如何创建安全登陆一', '使用表单登陆', NULL, '2018-07-06 22:27:52', NULL, '<p><font>配置用户的身份验证方式</font></p><pre><code>firewalls:\r\n&nbsp; &nbsp; &nbsp; &nbsp; dev:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: ^/(_(profiler|wdt)|css|images|js)/\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; security: false\r\n&nbsp; &nbsp; &nbsp; &nbsp; main:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; anonymous: true\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; form_login: #配置表单登陆\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; login_path: login #登陆路由\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; check_path: login #登陆提交路由<br></code></pre><p>设置访问权限</p><pre><code>access_control:\r\n&nbsp; &nbsp; &nbsp; &nbsp; # require ROLE_ADMIN for /admin*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }\r\n&nbsp; &nbsp; &nbsp; &nbsp; - { path: ^/admin, roles: ROLE_ADMIN }<br></code></pre><p><font>配置如何加载用户</font></p><pre><code>&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/6\r\n&nbsp;* Time: 21:35\r\n&nbsp;*/\r\nnamespace App\\Controller;\r\n\r\nuse App\\Form\\UserType;\r\nuse App\\Entity\\Users;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nuse Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\r\n\r\nclass LoginController extends&nbsp; Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/register\",name=\"register\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function register(Request $request,UserPasswordEncoderInterface $passwordEncoder)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; //1&gt;build the form\r\n&nbsp; &nbsp; &nbsp; &nbsp; $user = new Users();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $form = $this-&gt;createForm(UserType::class,$user);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; //2&gt;handle the submit\r\n&nbsp; &nbsp; &nbsp; &nbsp; $form-&gt;handleRequest($request);\r\n&nbsp; &nbsp; &nbsp; &nbsp; if($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()){\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //3&gt; Encode the password\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $password = $passwordEncoder-&gt;encodePassword($user,$user-&gt;getPlainPassword());\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $user-&gt;setPassword($password);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //4&gt; save the user\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;persist($user);\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;flush();\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new Response(\'success\');\r\n&nbsp; &nbsp; &nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;render(\'register.html.twig\',[\'form\'=&gt;$form-&gt;createView()]);\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><pre><code>&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/6\r\n&nbsp;* Time: 20:58\r\n&nbsp;*/\r\nnamespace&nbsp; App\\Controller;\r\n\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\r\nclass SecurityController extends Controller\r\n{\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/admin\",name=\"admin\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function admin()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return new Response(\'&lt;body&gt;admin&lt;/body&gt;\');\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/login\",name=\"login\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function login(Request $request,AuthenticationUtils $authenticationUtils)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $error = $authenticationUtils-&gt;getLastAuthenticationError();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $lastUsername = $authenticationUtils-&gt;getLastUsername();\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;render(\'login.html.twig\',[\'lastUsername\'=&gt;$lastUsername,\'error\'=&gt;$error]);\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><pre><code>&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;title&gt;Title&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n{% if error %}\r\n    &lt;div&gt;{{ error.messageKey|trans(error.messageData, \'security\') }}&lt;/div&gt;\r\n{% endif %}\r\n\r\n&lt;form action=\"{{ path(\'login\') }}\" method=\"post\"&gt;\r\n    &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\r\n    &lt;input type=\"text\" id=\"username\" name=\"_username\" value=\"{{ lastUsername }}\" /&gt;\r\n\r\n    &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\r\n    &lt;input type=\"password\" id=\"password\" name=\"_password\" /&gt;\r\n\r\n    {#\r\n        If you want to control the URL the user\r\n        is redirected to on success (more details below)\r\n        &lt;input type=\"hidden\" name=\"_target_path\" value=\"/account\" /&gt;\r\n    #}\r\n\r\n    &lt;button type=\"submit\"&gt;login&lt;/button&gt;\r\n&lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;<br></code></pre>', 1, 0, 1, 1),
(13, '【security】如何创建安全登陆二', '如何创建安全登陆二，Entity Repository Form Security', NULL, '2018-07-06 22:29:42', NULL, '<pre><code>&lt;?php\r\n\r\nnamespace App\\Repository;\r\n\r\nuse App\\Entity\\Users;\r\n\r\n\r\nuse Symfony\\Bridge\\Doctrine\\Security\\User\\UserLoaderInterface;\r\nuse Doctrine\\ORM\\EntityRepository;\r\n\r\n/**\r\n&nbsp;* @method Users|null find($id, $lockMode = null, $lockVersion = null)\r\n&nbsp;* @method Users|null findOneBy(array $criteria, array $orderBy = null)\r\n&nbsp;* @method Users[]&nbsp; &nbsp; findAll()\r\n&nbsp;* @method Users[]&nbsp; &nbsp; findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\r\n&nbsp;*/\r\nclass UsersRepository extends EntityRepository implements UserLoaderInterface\r\n{\r\n\r\n&nbsp; &nbsp; public function loadUserByUsername($username)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;createQueryBuilder(\'u\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;where(\'u.username = :username OR u.email = :email\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setParameter(\'username\', $username)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setParameter(\'email\', $username)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getQuery()\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getOneOrNullResult();\r\n&nbsp; &nbsp; }\r\n\r\n//&nbsp; &nbsp; /**\r\n//&nbsp; &nbsp; &nbsp;* @return Users[] Returns an array of Users objects\r\n//&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; /*\r\n&nbsp; &nbsp; public function findByExampleField($value)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;createQueryBuilder(\'u\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;andWhere(\'u.exampleField = :val\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setParameter(\'val\', $value)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;orderBy(\'u.id\', \'ASC\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setMaxResults(10)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getQuery()\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getResult()\r\n&nbsp; &nbsp; &nbsp; &nbsp; ;\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; */\r\n\r\n&nbsp; &nbsp; /*\r\n&nbsp; &nbsp; public function findOneBySomeField($value): ?Users\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;createQueryBuilder(\'u\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;andWhere(\'u.exampleField = :val\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setParameter(\'val\', $value)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getQuery()\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getOneOrNullResult()\r\n&nbsp; &nbsp; &nbsp; &nbsp; ;\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; */\r\n}\r\n<br></code></pre><pre><code>&lt;?php\r\n\r\nnamespace App\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\n/**\r\n&nbsp;* @ORM\\Entity(repositoryClass=\"App\\Repository\\UsersRepository\")\r\n&nbsp;*/\r\nclass Users implements UserInterface , \\Serializable\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @ORM\\Id()\r\n&nbsp; &nbsp; &nbsp;* @ORM\\GeneratedValue()\r\n&nbsp; &nbsp; &nbsp;* @ORM\\Column(type=\"integer\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; private $id;\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @ORM\\Column(type=\"string\", length=255)\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; private $username;\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @ORM\\Column(type=\"string\", length=255)\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; private $password;\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @ORM\\Column(type=\"string\", length=255)\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; private $email;\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @ORM\\Column(type=\"boolean\", nullable=true)\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; private $isActive;\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Assert\\NotBlank()\r\n&nbsp; &nbsp; &nbsp;* @Assert\\Length(max=4096)\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; private $plainPassword;\r\n&nbsp; &nbsp; public function getPlainPassword()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;plainPassword;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function setPlainPassword($password)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;plainPassword = $password;\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; public function __construct()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;isActive = true;\r\n\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; public function getSalt()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // TODO: Implement getSalt() method.\r\n&nbsp; &nbsp; &nbsp; &nbsp; return null;\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; public function getRoles()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // TODO: Implement getRoles() method.\r\n&nbsp; &nbsp; &nbsp; &nbsp; return array(\'ROLE_ADMIN\');\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; public function eraseCredentials()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // TODO: Implement eraseCredentials() method.\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; /** @see \\Serializable::serialize() */\r\n&nbsp; &nbsp; public function serialize()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return serialize(array(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;id,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;username,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;password,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // see section on salt below\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // $this-&gt;salt,\r\n&nbsp; &nbsp; &nbsp; &nbsp; ));\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; /** @see \\Serializable::unserialize() */\r\n&nbsp; &nbsp; public function unserialize($serialized)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; list (\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;id,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;username,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;password,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // see section on salt below\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // $this-&gt;salt\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ) = unserialize($serialized, array(\'allowed_classes\' =&gt; false));\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function getId()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;id;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function getUsername(): ?string\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;username;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function setUsername(string $username): self\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;username = $username;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function getPassword(): ?string\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;password;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function setPassword(string $password): self\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;password = $password;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function getEmail(): ?string\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;email;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function setEmail(string $email): self\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;email = $email;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function getIsActive(): ?bool\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;isActive;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function setIsActive(?bool $isActive): self\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;isActive = $isActive;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this;\r\n&nbsp; &nbsp; }\r\n}\r\n<br></code></pre><pre><code>&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/6\r\n&nbsp;* Time: 21:28\r\n&nbsp;*/\r\nnamespace App\\Form;\r\n\r\nuse App\\Entity\\Users;\r\nuse Symfony\\Component\\Form\\AbstractType;\r\nuse Symfony\\Component\\Form\\FormBuilderInterface;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType;\r\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\r\n\r\n\r\nclass UserType extends AbstractType\r\n{\r\n&nbsp; &nbsp; public function buildForm(FormBuilderInterface $builder, array $options)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $builder-&gt;add(\'email\',EmailType::class)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;add(\'username\',TextType::class)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;add(\'plainPassword\',RepeatedType::class,array(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'type\'=&gt; PasswordType::class,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'first_options\'=&gt;array(\'label\'=&gt;\'password\'),\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'second_options\'=&gt;array(\'label\'=&gt;\'repeat password\'),\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ));\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function configureOptions(OptionsResolver $resolver)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $resolver-&gt;setDefaults([\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'data_class\'=&gt;Users::class,\r\n&nbsp; &nbsp; &nbsp; &nbsp; ]);\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><pre><code>security:\r\n&nbsp; &nbsp; # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers\r\n\r\n&nbsp; &nbsp; encoders:\r\n&nbsp; &nbsp; &nbsp; &nbsp; App\\Entity\\Users:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; algorithm: bcrypt\r\n\r\n&nbsp; &nbsp; providers:\r\n&nbsp; &nbsp; &nbsp; &nbsp; our_db_provider:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; entity:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; class: App\\Entity\\Users\r\n\r\n\r\n&nbsp; &nbsp; firewalls:\r\n&nbsp; &nbsp; &nbsp; &nbsp; dev:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: ^/(_(profiler|wdt)|css|images|js)/\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; security: false\r\n&nbsp; &nbsp; &nbsp; &nbsp; main:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; anonymous: true\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; form_login:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; login_path: login\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; check_path: login\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; provider: our_db_provider\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # activate different ways to authenticate\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # http_basic: true\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # form_login: true\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # https://symfony.com/doc/current/security/form_login_setup.html\r\n\r\n&nbsp; &nbsp; # Easy way to control access for large sections of your site\r\n&nbsp; &nbsp; # Note: Only the *first* access control that matches will be used\r\n&nbsp; &nbsp; access_control:\r\n&nbsp; &nbsp; &nbsp; &nbsp; # - { path: ^/admin, roles: ROLE_ADMIN }\r\n&nbsp; &nbsp; &nbsp; &nbsp; # - { path: ^/profile, roles: ROLE_USER }\r\n&nbsp; &nbsp; &nbsp; &nbsp; - { path: ^/admin , roles: ROLE_ADMIN }\r\n<br></code></pre>', 1, 0, 1, 1);
INSERT INTO `article` (`id`, `title`, `descript`, `thumb`, `created_at`, `updated_at`, `content`, `category_id`, `views`, `is_comment`, `status`) VALUES
(14, '【secruity】总结', '前两篇security的总结', NULL, '2018-07-07 13:56:10', NULL, '<p>1、创建实体&nbsp;</p><pre><code>php bin/console make:entity  至少四个字段 username password email is_active</code></pre><p>2、生成数据库表</p><pre><code>php bin/console make:migration&nbsp;&nbsp;php bin/console doctrine:migrations:migrate</code></pre><p>3、配置security.yaml</p><pre><code>// config/packages/security.yaml\r\n1&gt; 在firewalls键下启用表单登录，并设置登录路径及提交路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;anonymous: true\r\n&nbsp;&nbsp;&nbsp;&nbsp;form_login:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;login_path: login\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check_path: login\r\n2&gt;设置访问权限 access_control\r\n&nbsp;&nbsp;&nbsp;&nbsp;- { path: ^/admin , roles: ROLE_ADMIN }\r\n&nbsp;&nbsp;&nbsp;&nbsp;#注意login路由不能在限制范围内，可使用匿名\r\n3&gt;创建路由及对应的控制器方法 以及登录表单的逻辑\r\n&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/7\r\n&nbsp;* Time: 14:27\r\n&nbsp;*/\r\n\r\nnamespace App\\Controller;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\r\n\r\nclass SecurityController extends Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/admin\" , name=\"admin\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function admin()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return new Response(\'&lt;body&gt;admin index&lt;/body&gt;\');\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/login\" , name=\"login\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function login(Request $request, AuthenticationUtils $authenticationUtils)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $error = $authenticationUtils-&gt;getLastAuthenticationError();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $lastUsername = $authenticationUtils-&gt;getLastUsername();\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;render(\'login.html.twig\',[\'error\'=&gt;$error,\'last_username\'=&gt;$lastUsername]);\r\n&nbsp; &nbsp; }\r\n\r\n}\r\n4&gt;添加login.html.twig\r\n{% if error %}\r\n&nbsp; &nbsp; &lt;div&gt;{{ error.messageKey|trans(error.messageData, \'security\') }}&lt;/div&gt;\r\n{% endif %}\r\n\r\n&lt;form action=\"{{ path(\'login\') }}\" method=\"post\"&gt;\r\n&nbsp; &nbsp; &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\r\n&nbsp; &nbsp; &lt;input type=\"text\" id=\"username\" name=\"_username\" value=\"{{ last_username }}\" /&gt;\r\n\r\n&nbsp; &nbsp; &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\r\n&nbsp; &nbsp; &lt;input type=\"password\" id=\"password\" name=\"_password\" /&gt;\r\n\r\n&nbsp; &nbsp; {#\r\n&nbsp; &nbsp; &nbsp; &nbsp; If you want to control the URL the user\r\n&nbsp; &nbsp; &nbsp; &nbsp; is redirected to on success (more details below)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;input type=\"hidden\" name=\"_target_path\" value=\"/account\" /&gt;\r\n&nbsp; &nbsp; #}\r\n\r\n&nbsp; &nbsp; &lt;button type=\"submit\"&gt;login&lt;/button&gt;\r\n&lt;/form&gt;\r\n5&gt;配置用户来源及密码加密（配置加载用户）\r\n&nbsp;Security:\r\n&nbsp;&nbsp;&nbsp;&nbsp;providers:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;our_db_provider:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entity:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class: App\\Entity\\Users\r\n    \r\n   encoders:\r\n      App\\Entity\\Users:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;algorithm: bcrypt\r\n\r\n&nbsp;&nbsp;&nbsp;Firewalls: #main下添加用户提供\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;provider: our_db_provider&nbsp;&nbsp;&nbsp;&nbsp;\r\n</code></pre><p>4、配置User实体及仓库</p><pre><code>// scr\\Entity\\Users\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;//实现它的方法\r\nclass Users implements UserInterface ,\\Serializable\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function __construct()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	$this-&gt;is_active = true;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function getSalt()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	return null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function getRoles()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	return array(\'ROLE_ADMIN\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function eraseCredentials()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	// TODO: Implement eraseCredentials() method.\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function serialize()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	return serialize([\r\n&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp; &nbsp;$this-&gt;id,\r\n&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp; &nbsp;$this-&gt;username,\r\n&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp; &nbsp;$this-&gt;password\r\n&nbsp;&nbsp;&nbsp;&nbsp;	]);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function unserialize($serialized)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	return list($this-&gt;id,$this-&gt;username,$this-&gt;password)\r\n&nbsp;&nbsp;&nbsp;&nbsp;		= unserialize($serialized,array(\'allowed_classes\' =&gt; false));\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n\r\n// src\\Respository\\UserRespository 登录操作 使用自定义查询加载用户\r\nuse Symfony\\Bridge\\Doctrine\\Security\\User\\UserLoaderInterface;\r\nuse Doctrine\\ORM\\EntityRepository;\r\nclass UsersRepository extends EntityRepository implements UserLoaderInterface\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function loadUserByUsername($username)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;createQueryBuilder(\'u\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;where(\'u.username = :username or u.email = :username\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setParameter(\'username\',$username)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getQuery()\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getOneOrNullResult();\r\n&nbsp; &nbsp; }\r\n}\r\n\r\n</code></pre><p>5、注册用户表单及用户密码加密逻辑,创建第一个用户</p><p>Users实体中有个明文密码字段&nbsp;plainPassword，此字段不会保留:(请注意不在其上方设置@ORM\\Column）。它暂时存储注册表单中的普通密码。可以验证此字段，然后使用该password字段填充该字段。</p><pre><code>// src/Entity/Users.php\r\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\n/**\r\n  * @Assert\\NotBlank()\r\n  * @Assert\\Length(max=4096)\r\n */\r\n    private $plainPassword;\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function __construct()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	$this-&gt;is_active = true;\r\n&nbsp;&nbsp;&nbsp;&nbsp;	$this-&gt;roles = array(\'ROLE_ADMIN\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function getPlainPassword()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	return $this-&gt;plainPassword;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public function setPlainPassword($password)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	$this-&gt;plainPassword = $password;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n<br></code></pre><p>6、创建注册表单 、控制器、及模板</p><pre><code>&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/7\r\n&nbsp;* Time: 15:16\r\n&nbsp;*/\r\n\r\n// src/Form/UserType.php\r\nnamespace App\\Form;\r\n\r\nuse App\\Entity\\Users;\r\nuse Symfony\\Component\\Form\\AbstractType;\r\nuse Symfony\\Component\\Form\\FormBuilderInterface;\r\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType;\r\n\r\nclass UserType extends AbstractType\r\n{\r\n&nbsp; &nbsp; public function buildForm(FormBuilderInterface $builder, array $options)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $builder\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;add(\'email\', EmailType::class)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;add(\'username\', TextType::class)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;add(\'plainPassword\', RepeatedType::class, array(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'type\' =&gt; PasswordType::class,\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'first_options\'&nbsp; =&gt; array(\'label\' =&gt; \'Password\'),\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'second_options\' =&gt; array(\'label\' =&gt; \'Repeat Password\'),\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ))\r\n&nbsp; &nbsp; &nbsp; &nbsp; ;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function configureOptions(OptionsResolver $resolver)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $resolver-&gt;setDefaults(array(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'data_class\' =&gt; Users::class,\r\n&nbsp; &nbsp; &nbsp; &nbsp; ));\r\n&nbsp; &nbsp; }\r\n}\r\n\r\n&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/7\r\n&nbsp;* Time: 15:17\r\n&nbsp;*/\r\n// src/Controller/RegisterController.php\r\nnamespace App\\Controller;\r\n\r\nuse App\\Form\\UserType;\r\nuse App\\Entity\\Users;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\r\n\r\nclass RegisterController extends Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/register\", name=\"user_registration\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // 1) build the form\r\n&nbsp; &nbsp; &nbsp; &nbsp; $user = new User();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $form = $this-&gt;createForm(UserType::class, $user);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; // 2) handle the submit (will only happen on POST)\r\n&nbsp; &nbsp; &nbsp; &nbsp; $form-&gt;handleRequest($request);\r\n&nbsp; &nbsp; &nbsp; &nbsp; if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 3) Encode the password (you could also do this via Doctrine listener)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $password = $passwordEncoder-&gt;encodePassword($user, $user-&gt;getPlainPassword());\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $user-&gt;setPassword($password);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 4) save the User!\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;persist($user);\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;flush();\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ... do any other work - like sending them an email, etc\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // maybe set a \"flash\" success message for the user\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;redirectToRoute(\'replace_with_some_route\');\r\n&nbsp; &nbsp; &nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;render(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'register.html.twig\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; array(\'form\' =&gt; $form-&gt;createView())\r\n&nbsp; &nbsp; &nbsp; &nbsp; );\r\n&nbsp; &nbsp; }\r\n}\r\n\r\n\r\n{{ form_start(form) }}\r\n&nbsp; &nbsp; {{ form_row(form.username) }}\r\n&nbsp; &nbsp; {{ form_row(form.email) }}\r\n&nbsp; &nbsp; {{ form_row(form.plainPassword.first) }}\r\n&nbsp; &nbsp; {{ form_row(form.plainPassword.second) }}\r\n\r\n&nbsp; &nbsp; &lt;button type=\"submit\"&gt;Register!&lt;/button&gt;\r\n{{ form_end(form) }}\r\n<br></code></pre><p>Yes!</p>', 1, 0, 1, 1),
(15, '【controller】控制器是您创建的PHP函数，它从Request对象读取信息 并创建并返回Response对象。', '控制器是您创建的PHP函数，它从Request对象读取信息 并创建并返回Response对象。响应可能是HTML页面，JSON，XML，文件下载，重定向，404错误或您可以想到的任何其他内容。控制器执行应用程序渲染页面内容所需的任意逻辑', NULL, '2018-07-09 09:08:22', NULL, '<p>常用的控制器方法</p><p>一、生成链接</p><pre><code>&nbsp;$this-&gt;generateUrl(\'route_name\',[parameters]);</code></pre><p>二、重定向 redirectToRoute() and redirect()</p><pre><code>&nbsp;&nbsp;return $this-&gt;redirectToRoute(\'route_name\',[parameters]);\r\n&nbsp;&nbsp;return $this-&gt;redirect(\'http://www.baidu.com\'); //外部链接</code></pre><p>三、渲染模板</p><pre><code>&nbsp;&nbsp;// use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller\r\n&nbsp;&nbsp;return $this-&gt;render(\'template路径\',[parameters]);</code></pre><p>四、管理错误及404页面</p><pre><code>&nbsp;&nbsp;throw new $this-&gt;createNotFoundException(\'message\'); //如果找不到内容，您应该返回404响应。为此，抛出一种特殊类型的异常\r\n&nbsp;&nbsp;//如果您抛出一个扩展的异常或者是一个实例&nbsp;HttpException，Symfony将使用适当的HTTP状态代码。否则，响应将具有500 HTTP状态代码\r\n&nbsp;&nbsp;throw new \\Exception(\'message\');</code></pre><p>五、请求对象作为控制器参数</p><pre><code>&nbsp;&nbsp;public function index(Request $request)\r\n&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$page = $request-&gt;query-&gt;get(\'page\'); // 获取get 参数\r\n&nbsp;&nbsp;}</code></pre><p>六、管理session</p><pre><code>&nbsp;&nbsp;use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface\r\n&nbsp;&nbsp;public function index(SessionInterface $session)\r\n&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$session-&gt;set(\'userid\',1); // set session\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$session-&gt;get(\'userid\'); // get session\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$session-&gt;get(\'userid\',default); // 设置获取不到默认值&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;}</code></pre><p>七、flash消息</p><pre><code>&nbsp;&nbsp;$this-&gt;addFlash(\'message type\',\'message content\');\r\n&nbsp;&nbsp;//模板中使用flash消息\r\n&nbsp;&nbsp;{% for message in app.flashes(\'type\') %}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=\'alert-success\'&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{  message }}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\r\n&nbsp;&nbsp;{% endfor %}\r\n\r\n&nbsp;&nbsp;&nbsp;or \r\n\r\n&nbsp;&nbsp;{% for type,messages in app.flashes %}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{% for message in message %}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=\"alert-{{ type }}\"&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{ message }}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;{% endfor %}\r\n&nbsp;&nbsp;{% endfor %}</code></pre><p>八、请求和响应对象</p><pre><code>&nbsp;&nbsp;public function index(Request $request)\r\n&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//判断是否ajax\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;isXmlHttpRequest();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取get 参数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;query-&gt;get(\'key\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取post 参数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;request-&gt;get(\'key\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取server 参数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;server-&gt;get(\'HTTP_HOST\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// retrieves an instance of UploadedFile identified by foo\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;file-&gt;get(\'foo\');&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取cookie\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;cookie-&gt;get(\'cookie\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取header\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;header-&gt;get(\'header\');\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//响应\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// creates a simple Response with a 200 status code (the default)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$response = new Response(\'Hello \'.$name, Response::HTTP_OK);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// creates a CSS-response with a 200 status code\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$response = new Response(\'&lt;style&gt; ... &lt;/style&gt;\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$response-&gt;headers-&gt;set(\'Content-Type\', \'text/css\');\r\n&nbsp;&nbsp;}</code></pre><p>九、返回json</p><pre><code>&nbsp;&nbsp;// returns \'{\"username\":\"jane.doe\"}\' and sets the proper Content-Type header\r\n  return $this-&gt;json(array(\'username\' =&gt; \'jane.doe\'));\r\n\r\n  // the shortcut defines three optional arguments\r\n  // return $this-&gt;json($data, $status = 200, $headers = array(), $context = array());</code></pre><p>十、文件处理</p><pre><code>&nbsp; public function download()\r\n&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;  // send the file contents and force the browser to download it\r\n&nbsp;&nbsp;&nbsp;&nbsp;  return $this-&gt;file(\'/path/to/some_file.pdf\');\r\n&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;file()助手提供一些参数来配置它的行为：\r\n\r\n&nbsp;&nbsp;use Symfony\\Component\\HttpFoundation\\File\\File;\r\n&nbsp;&nbsp;use Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\r\n\r\n&nbsp;&nbsp;public function download()\r\n&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;  // load the file from the filesystem\r\n&nbsp;&nbsp;&nbsp;&nbsp;  $file = new File(\'/path/to/some_file.pdf\');\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;  return $this-&gt;file($file);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;  // rename the downloaded file\r\n&nbsp;&nbsp;&nbsp;&nbsp;  return $this-&gt;file($file, \'custom_name.pdf\');\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;  // display the file contents in the browser instead of downloading it\r\n&nbsp;&nbsp;&nbsp;&nbsp;  return $this-&gt;file(\'invoice_3241.pdf\', \'my_invoice.pdf\', ResponseHeaderBag::DISPOSITION_INLINE);\r\n&nbsp;&nbsp;}\r\n<br></code></pre>', 1, 0, 1, 1),
(16, '【controller】如何自定义错误页', '如何自定义错误页，比如更改404模板', NULL, '2018-07-09 09:53:42', NULL, '<p style=\"margin-left: 0px;\"><font>在Symfony应用程序中，所有错误都被视为异常，无论它们只是404 Not Found错误还是由于在代码中抛出异常而触发的致命错误。</font></p><p style=\"margin-left: 0px;\"><font>在</font>开发环境中<font><font>，Symfony捕获所有异常并显示一个</font><font>&nbsp;包含大量调试信息</font><font>的特殊</font></font>异常页面<font>，以帮助您快速发现根问题</font></p><p style=\"margin-left: 0px;\"><font><font><font>由于这些页面包含许多敏感的内部信息，因此Symfony不会在生产环境中显示它们。</font><font>相反，它将显示一个简单而通用的</font></font></font>错误页面；</p><p style=\"margin-left: 0px;\">可以根据您的需要以不同方式自定义生产环境的错误页面：<br></p><p>如果您只想更改错误页面的内容和样式以匹配应用程序的其余部分，请覆盖默认错误模板 ;</p><p>如果您还想调整Symfony使用的逻辑来生成错误页面，请 覆盖默认的异常控制器 ;</p><p>如果需要完全控制异常处理来执行自己的逻辑，请 使用kernel.exception事件。</p><p>覆盖默认的错误模板</p><p>加载错误页面时，内部ExceptionController 用于呈现Twig模板以显示用户。</p><p>此控制器使用HTTP状态代码，请求格式和以下逻辑来确定模板文件名：</p><p>寻找给定格式和状态代码的模板（如error404.json.twig 或error500.html.twig）;</p><p>如果以前的模板不存在，则丢弃状态代码并查找给定格式的通用模板（如error.json.twig或 error.xml.twig）;</p><p>如果以前的模板都不存在，则回退到通用HTML模板（error.html.twig）。</p><p>要覆盖这些模板，请依赖标准的Symfony方法来 覆盖生活在bundle中的模板并将它们放在<span style=\"color: rgb(32, 147, 97);\">templates/bundles/TwigBundle/Exception/</span>目录中。</p><pre><code>templates/\r\n└─ bundles/\r\n   └─ TwigBundle/\r\n      └─ Exception/\r\n         ├─ error404.html.twig\r\n         ├─ error403.html.twig\r\n         ├─ error.html.twig      # All other HTML errors (including 500)\r\n         ├─ error404.json.twig\r\n         ├─ error403.json.twig\r\n         └─ error.json.twig      # All other JSON errors (including 500)</code></pre><pre><code>{# templates/bundles/TwigBundle/Exception/error404.html.twig #}\r\n{% extends \'base.html.twig\' %}\r\n\r\n{% block body %}\r\n    &lt;h1&gt;Page not found&lt;/h1&gt;\r\n\r\n    &lt;p&gt;\r\n        The requested page couldn\'t be located. Checkout for any URL\r\n        misspelling or &lt;a href=\"{{ path(\'homepage\') }}\"&gt;return to the homepage&lt;/a&gt;.\r\n    &lt;/p&gt;\r\n{% endblock %}<br></code></pre>', 1, 0, 1, 1),
(17, '【controller】如何上传文件', '通过两种方式介绍如何上传文件', NULL, '2018-07-09 11:55:43', NULL, '<p><font><font>您可以考虑使用</font></font><a href=\"https://github.com/dustin10/VichUploaderBundle\"><font><font>VichUploaderBundle</font></font></a><font><font>社区捆绑包</font><font>，而不是自己处理文件上传&nbsp;</font><font>。</font><font>该捆绑包提供所有常见操作（例如文件重命名，保存和删除），并与Doctrine ORM，MongoDB ODM，PHPCR ODM和Propel紧密集成。</font></font><br></p><p><font><font><font><font>想象一下，您</font></font><code class=\"notranslate\">Product</code><font><font>的应用程序中</font><font>有一个</font><font>实体，并且您想为每个产品添加PDF手册。</font><font>为此，请添加</font></font><code class=\"notranslate\">brochure</code><font><font>在</font></font><code class=\"notranslate\">Product</code><font><font>实体中</font><font>调用的新属性</font><font>：</font></font><br></font></font></p><pre><code>// src/Entity/Product.php\r\nnamespace App\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\n\r\nclass Product\r\n{\r\n    // ...\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\")\r\n     *\r\n     * @Assert\\NotBlank(message=\"Please, upload the product brochure as a PDF file.\")\r\n     * @Assert\\File(mimeTypes={ \"application/pdf\" })\r\n     */\r\n    private $brochure;\r\n\r\n    public function getBrochure()\r\n    {\r\n        return $this-&gt;brochure;\r\n    }\r\n\r\n    public function setBrochure($brochure)\r\n    {\r\n        $this-&gt;brochure = $brochure;\r\n\r\n        return $this;\r\n    }\r\n}<br></code></pre><p style=\"margin-left: 0px;\"><font>请注意，</font><code class=\"notranslate\">brochure</code><font><font>列</font><font>的类型</font></font><code class=\"notranslate\">string</code><font>不是</font><code class=\"notranslate\">binary</code><font>&nbsp;或</font><code class=\"notranslate\">blob</code><font>因为它只存储PDF文件名而不是文件内容。</font></p><p style=\"margin-left: 0px;\"><font>然后，将新</font><code class=\"notranslate\">brochure</code><font><font>字段</font><font>添加</font><font>到管理</font></font><code class=\"notranslate\">Product</code><font><font>实体</font><font>的表单</font><font>：</font></font></p><pre><code>// src/Form/ProductType.php\r\nnamespace App\\Form;\r\n\r\nuse App\\Entity\\Product;\r\nuse Symfony\\Component\\Form\\AbstractType;\r\nuse Symfony\\Component\\Form\\FormBuilderInterface;\r\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\r\n\r\nclass ProductType extends AbstractType\r\n{\r\n    public function buildForm(FormBuilderInterface $builder, array $options)\r\n    {\r\n        $builder\r\n            // ...\r\n            -&gt;add(\'brochure\', FileType::class, array(\'label\' =&gt; \'Brochure (PDF file)\'))\r\n            // ...\r\n        ;\r\n    }\r\n\r\n    public function configureOptions(OptionsResolver $resolver)\r\n    {\r\n        $resolver-&gt;setDefaults(array(\r\n            \'data_class\' =&gt; Product::class,\r\n        ));\r\n    }\r\n}<br></code></pre><p><font><font>现在，更新呈现表单以显示新</font></font><code class=\"notranslate\">brochure</code><font><font>&nbsp;字段的模板</font></font><br></p><pre><code>{# templates/product/new.html.twig #}\r\n&lt;h1&gt;Adding a new product&lt;/h1&gt;\r\n\r\n{{ form_start(form) }}\r\n    {# ... #}\r\n\r\n    {{ form_row(form.brochure) }}\r\n{{ form_end(form) }}\r\n<br></code></pre><p>更新控制器提交后的代码</p><pre><code>&nbsp;&nbsp;if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\r\n            // $file stores the uploaded PDF file\r\n            /** @var Symfony\\Component\\HttpFoundation\\File\\UploadedFile $file */\r\n            $file = $product-&gt;getBrochure();\r\n\r\n            $fileName = $this-&gt;generateUniqueFileName().\'.\'.$file-&gt;guessExtension();\r\n\r\n            // moves the file to the directory where brochures are stored\r\n            $file-&gt;move(\r\n                $this-&gt;getParameter(\'brochures_directory\'),\r\n                $fileName\r\n            );\r\n\r\n            // updates the \'brochure\' property to store the PDF file name\r\n            // instead of its contents\r\n            $product-&gt;setBrochure($fileName);\r\n\r\n            // ... persist the $product variable or any other work\r\n\r\n            return $this-&gt;redirect($this-&gt;generateUrl(\'app_product_list\'));\r\n        }<br></code></pre><p><font><font>现在，创建</font></font><code class=\"notranslate\">brochures_directory</code><font><font>控制器中使用</font><font>的</font><font>参数，以指定存储目录：</font></font><br></p><pre><code># config/services.yaml\r\n\r\n# ...\r\nparameters:\r\n    brochures_directory: \'%kernel.project_dir%/public/uploads/brochures\'<br></code></pre><p style=\"margin-left: 0px;\"><font>在上述控制器的代码中需要考虑一些重要的事情：</font></p><ol><li><font>上传表单时，该</font><code class=\"notranslate\">brochure</code><font><font>属性包含整个PDF文件内容。</font><font>由于此属性仅存储文件名，因此必须在保持实体更改之前设置其新值;</font></font></li><li><font>在Symfony应用程序中，上载的文件是</font><code class=\"notranslate\"><a href=\"https://api.symfony.com/4.1/Symfony/Component/HttpFoundation/File/UploadedFile.html\">UploadedFile</a></code><font><font>类的</font><font>对象&nbsp;</font><font>。</font><font>该类提供处理上传文件时最常用操作的方法;</font></font></li><li><font><font>众所周知的安全性最佳实践是永远不要相信用户提供的输入。</font><font>这也适用于访问者上传的文件。</font><font>本</font></font><code class=\"notranslate\">UploadedFile</code><font>&nbsp;类提供的方法来获得原始文件的扩展名（</font><code class=\"notranslate\"><a href=\"https://api.symfony.com/4.1/Symfony/Component/HttpFoundation/File/UploadedFile.html#method_getExtension\">getExtension()</a></code><font>），原始文件的大小（</font><code class=\"notranslate\"><a href=\"https://api.symfony.com/4.1/Symfony/Component/HttpFoundation/File/UploadedFile.html#method_getClientSize\">getClientSize()</a></code><font>）和原文件名（</font><code class=\"notranslate\"><a href=\"https://api.symfony.com/4.1/Symfony/Component/HttpFoundation/File/UploadedFile.html#method_getClientOriginalName\">getClientOriginalName()</a></code><font><font>）。</font><font>但是，它们被认为是</font></font>不安全的，<font><font>因为恶意用户可能会篡改该信息。</font><font>这就是为什么生成一个唯一的名称并使用该</font></font><code class=\"notranslate\"><a href=\"https://api.symfony.com/4.1/Symfony/Component/HttpFoundation/File/UploadedFile.html#method_guessExtension\">guessExtension()</a></code><font><font>&nbsp;方法让Symfony根据文件MIME类型猜出正确的扩展</font><font>名更好的原因</font><font>;</font></font></li></ol><p>您可以使用以下代码链接到产品的PDF路径：<br></p><pre><code>&lt;a href=\"{{ asset(\'uploads/brochures/\' ~ product.brochure) }}\"&gt;View brochure (PDF)&lt;/a&gt;<br></code></pre><p>第二种方式 创建上传服务</p><pre><code>// src/Service/FileUploader.php\r\nnamespace App\\Service;\r\n\r\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\r\n\r\nclass FileUploader\r\n{\r\n    private $targetDirectory;\r\n\r\n    public function __construct($targetDirectory)\r\n    {\r\n        $this-&gt;targetDirectory = $targetDirectory;\r\n    }\r\n\r\n    public function upload(UploadedFile $file)\r\n    {\r\n        $fileName = md5(uniqid()).\'.\'.$file-&gt;guessExtension();\r\n\r\n        $file-&gt;move($this-&gt;getTargetDirectory(), $fileName);\r\n\r\n        return $fileName;\r\n    }\r\n\r\n    public function getTargetDirectory()\r\n    {\r\n        return $this-&gt;targetDirectory;\r\n    }\r\n}<br></code></pre><p>然后，为类创建服务</p><pre><code># config/services.yaml\r\nservices:\r\n    # ...\r\n\r\n    App\\Service\\FileUploader:\r\n        arguments:\r\n            $targetDirectory: \'%brochures_directory%\'<br></code></pre><p>控制器中使用上传服务</p><pre><code>// src/Controller/ProductController.php\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse App\\Service\\FileUploader;\r\n\r\n// ...\r\npublic function new(Request $request, FileUploader $fileUploader)\r\n{\r\n    // ...\r\n\r\n    if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {\r\n        $file = $product-&gt;getBrochure();\r\n        $fileName = $fileUploader-&gt;upload($file);\r\n\r\n        $product-&gt;setBrochure($fileName);\r\n\r\n        // ...\r\n    }\r\n\r\n    // ...\r\n}<br></code></pre>', 1, 0, 1, 1),
(18, '【template】创建和使用模板', '创建和使用模板', NULL, '2018-07-09 13:15:55', NULL, '<p style=\"margin-left: 0px;\"><font>Twig定义了三种特殊语法：</font></p><p><code class=\"notranslate\">{{ ... }}</code><font>“说点什么”：将变量或表达式的结果打印到模板中。</font></p><p><code class=\"notranslate\">{% ... %}</code><font><font>“有所作为”：一个</font><font>控制模板逻辑的</font></font>标签<font><font>&nbsp;;&nbsp;</font><font>它用于执行诸如for循环之类的语句。</font></font></p><p><code class=\"notranslate\">{# ... #}</code><font>“评论一下”：它等同于PHP&nbsp;</font><code class=\"notranslate\">/* comment */</code><font>语法。它用于添加单行或多行注释。注释的内容不包含在呈现的页面中。</font></p><p><font><font>模板布局和继承</font></font></p><pre><code>{% block main %}{% endblock %}\r\n\r\n{% extends \'base.html.twig\' %}\r\n&nbsp;&nbsp;{% block main %} \r\n&nbsp;&nbsp;{{ parent() }} \r\n&nbsp;&nbsp;... \r\n{% endblock %}</code></pre><p>包含其他模板</p><pre><code>{{ include(\'article/article_details.html.twig\', { \'article\': article }) }}<br></code></pre><p>模板链接到其他页面</p><pre><code>{{ path(\'route_name\',{\'id\':\'id\',...}) }}</code></pre><p>模板中使用css js</p><pre><code>{{ asset(\'css/css.css\')}} //路径是 /public/css/css.css\r\n\r\n//如果需要使用绝对路径\r\n&lt;img src=\"{{ absolute_url(asset(\'images/logo.png\')) }}\" alt=\"Symfony!\" /&gt;\r\n</code></pre><p><br></p><p>模板命名和位置</p><p>默认情况下，模板可以位于两个不同的位置：</p><p>templates/</p><p>应用程序的views目录可以包含应用程序范围的基本模板（即应用程序的应用程序包的布局和模板）以及覆盖第三方包模板的模板。</p><p>vendor/path/to/CoolBundle/Resources/views/</p><p>每个第三方捆绑包都将其模板放在其Resources/views/ 目录（和子目录）中。当您计划共享捆绑包时，应将模板放在捆绑包中而不是templates/目录中。</p><p>您将使用的大多数模板都存在于templates/ 目录中。您将使用的路径将相对于此目录。例如，要渲染/扩展templates/base.html.twig，您将使用&nbsp; base.html.twig路径并渲染/扩展 templates/blog/index.html.twig，您将使用&nbsp; blog/index.html.twig路径。</p>', 1, 0, 1, 1),
(19, '【template】如何在模板中使用app里的用户、session以及请求等', '如何在模板中使用app里的用户、session以及请求等', NULL, '2018-07-09 13:19:06', NULL, '<p>在每个请求期间，Symfony将app 默认在Twig和PHP模板引擎中设置全局模板变量。该app变量是一个AppVariable 实例，它允许您自动访问某些特定于应用程序的变量：</p><p>app.user</p><p>当前用户的表示或者null如果没有。存储在此变量中的值可以是UserInterface 对象，实现__toString()方法的任何其他对象，甚至是常规字符串。</p><p>app.request</p><p>Request表示当前请求的对象（取决于您的应用程序，这可以是子请求或常规请求，如稍后所述）。</p><p>app.session</p><p>Session表示当前用户会话或null不存在的对象。</p><p>app.environment</p><p>当前环境的名称（dev，prod，等）。</p><p>app.debug</p><p>如果处于调试模式则为真。否则就错了。</p><pre><code>&lt;p&gt;Username: {{ app.user.username }}&lt;/p&gt;\r\n{% if app.debug %}\r\n    &lt;p&gt;Request method: {{ app.request.method }}&lt;/p&gt;\r\n    &lt;p&gt;Application Environment: {{ app.environment }}&lt;/p&gt;\r\n{% endif %}<br></code></pre>', 1, 0, 1, 1),
(20, '【template】如何注册模板的全局变量', '如何注册模板的全局变量', NULL, '2018-07-09 13:21:51', NULL, '<p><font><font>有时您希望所使用的所有模板都可以访问变量。</font><font>这可以在你的</font></font><code class=\"notranslate\">config/packages/twig.yaml</code><font><font>文件中定义</font></font><br></p><pre><code># config/packages/twig.yaml\r\ntwig:\r\n    # ...\r\n    globals:\r\n        ga_tracking: UA-xxxxx-x\r\n<br></code></pre><p style=\"margin-left: 0px;\"><font>现在，该变量</font><code class=\"notranslate\">ga_tracking</code><font>在所有Twig模板中都可用：</font></p><pre><code>&lt;p&gt;The google tracking code is: {{ ga_tracking }}&lt;/p&gt;</code></pre><p>另外一种方式是定义服务容器参数，<font>您还可以利用内置的</font><a href=\"http://symfony.com/doc/current/service_container.html#service-container-parameters\">Service Parameters</a><font>&nbsp;系统，该系统允许您隔离或重用该值：</font></p><pre><code><span class=\"c1\" style=\"box-sizing: border-box; color: rgb(183, 41, 217); font-style: italic;\"># config/services.yaml</span>\r\n<span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">parameters</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span>\r\n    <span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">ga_tracking</span><span class=\"p-Indicator\" style=\"box-sizing: border-box; color: rgb(255, 132, 0);\">:</span> <span class=\"l-Scalar-Plain\" style=\"box-sizing: border-box;\">UA-xxxxx-x\r\n\r\n# config/packages/twig.yaml\r\ntwig:\r\n    globals:\r\n        ga_tracking: \'%ga_tracking%\'\r\n</span></code></pre>', 1, 0, 1, 1),
(21, '【template】如何在模板中嵌入（引入）控制器方法', '比如本站的右侧栏信息就是通过引入一个controller里的方法实现的', NULL, '2018-07-09 13:28:27', NULL, '<p style=\"margin-left: 0px;\"><a href=\"http://symfony.com/doc/current/templating.html#including-other-templates\">包含模板片段</a><font><font>对于在多个页面上重用相同内容很有用。</font><font>但是，在某些情况下，这种技术不是最佳解决方案。</font></font></p><p style=\"margin-left: 0px;\"><font><font>考虑一个网站，在其侧边栏上显示最近发布的文章。</font><font>这篇文章列表是动态的，它可能是数据库查询的结果。</font><font>换句话说，显示该侧边栏的任何页面的控制器必须进行相同的数据库查询，并将文章列表传递给包含的模板片段。</font></font></p><p style=\"margin-left: 0px;\"><font>Symfony提出的替代解决方案是创建一个控制器，该控制器仅显示最近文章的列表，然后从需要显示该内容的任何模板调用该控制器。</font></p><p style=\"margin-left: 0px;\"><font>首先，创建一个呈现一定数量的最近文章的控制器：</font></p><pre><code>// src/Controller/ArticleController.php\r\nnamespace App\\Controller;\r\n\r\n// ...\r\n\r\nclass ArticleController extends Controller\r\n{\r\n    public function recentArticles($max = 3)\r\n    {\r\n        // make a database call or other logic\r\n        // to get the \"$max\" most recent articles\r\n        $articles = ...;\r\n\r\n        return $this-&gt;render(\r\n            \'article/recent_list.html.twig\',\r\n            array(\'articles\' =&gt; $articles)\r\n        );\r\n    }\r\n}<br></code></pre><p><font><font>然后，创建一个</font></font><code class=\"notranslate\">recent_list</code><font><font>模板片段以列出控制器给出的文章：</font></font><br></p><pre><code>{# templates/article/recent_list.html.twig #}\r\n{% for article in articles %}\r\n    &lt;a href=\"{{ path(\'article_show\', {slug: article.slug}) }}\"&gt;\r\n        {{ article.title }}\r\n    &lt;/a&gt;\r\n{% endfor %}<br></code></pre><p><font><font>最后，使用</font></font><code class=\"notranslate\">render()</code><font><font>函数和控制器的标准字符串语法（即</font></font><span style=\"color: rgb(192, 192, 192); font-size: 14px;\"><font><font>controllerNamespace</font></font></span><font><font>&nbsp;::&nbsp;</font></font><span style=\"color: rgb(192, 192, 192); font-size: 14px;\"><font><font>action</font></font></span><font><font>）</font><font>从任何模板调用控制器</font><font>：</font></font><br></p><pre><code>{# templates/base.html.twig #}\r\n\r\n{# ... #}\r\n&lt;div id=\"sidebar\"&gt;\r\n    {{ render(controller(\r\n        \'App\\\\Controller\\\\ArticleController::recentArticles\',\r\n        { \'max\': 3 }\r\n    )) }}\r\n&lt;/div&gt;<br></code></pre>', 1, 0, 1, 1),
(22, '【template】如何编写自己的扩展', '如何编写自己的扩展', NULL, '2018-07-09 13:40:06', NULL, '<p><font><font>如果您需要创建自定义Twig函数，过滤器，测试等，则需要创建Twig扩展。</font><font>您可以</font><font>在Twig文档中</font><font>阅读有关</font></font><a href=\"https://twig.sensiolabs.org/doc/2.x/advanced.html#creating-an-extension\"><font><font>Twig Extensions的</font></font></a><font><font>更多信息</font><font>。</font></font><br></p><p><font><font><font><font>假设您要创建一个名为</font></font><code class=\"notranslate\">price</code><font><font>格式化数字</font><font>的新过滤器</font><font>：</font></font><br></font></font></p><pre><code>{{ product.price|price }}\r\n\r\n{# pass in the 3 optional arguments #}\r\n{{ product.price|price(2, \',\', \'.\') }}<br></code></pre><p><font><font>创建一个扩展</font></font><code class=\"notranslate\">AbstractExtension</code><font><font>并填充逻辑的类：</font></font><br></p><pre><code>// src/Twig/AppExtension.php\r\nnamespace App\\Twig;\r\n\r\nuse Twig\\Extension\\AbstractExtension;\r\nuse Twig\\TwigFilter;\r\n\r\nclass AppExtension extends AbstractExtension\r\n{\r\n    public function getFilters()\r\n    {\r\n        return array(\r\n            new TwigFilter(\'price\', array($this, \'priceFilter\')),\r\n        );\r\n    }\r\n\r\n    public function priceFilter($number, $decimals = 0, $decPoint = \'.\', $thousandsSep = \',\')\r\n    {\r\n        $price = number_format($number, $decimals, $decPoint, $thousandsSep);\r\n        $price = \'$\'.$price;\r\n\r\n        return $price;\r\n    }\r\n}<br></code></pre>', 1, 0, 1, 1),
(23, '【doctrine】数据库和doctrine ORM', '数据库和doctrine ORM', NULL, '2018-07-09 14:23:36', NULL, '<p>1、配置数据库 .env DATABASE_URL</p><pre><code>// .env\r\nDATABASE_URL = \'mysql://db_user:db_pwd@db_host:db_port/db_name\';\r\n\r\n//如果用户名或密码中有! @ #等特殊符号，请使用urlencode编码\r\nconfig/packages/doctrine.yaml您可以配置更多选项，包括您的server_version（例如5.7，如果您使用的是MySQL 5.7），这可能会影响Doctrine的运行方式。\r\n</code></pre><p>2、生成数据库</p><pre><code>php bin/console doctrine:database:create</code></pre><p>3、创建实体类</p><pre><code>php bin/console make:entity</code></pre><p>4、迁移：创建数据库表/模式<br></p><pre><code>php bin/console make:migration</code></pre><p>5、生成表，此时会情况存在表的数据</p><pre><code>php bin/console doctrine:migrations:migrate</code></pre>', 1, 0, 1, 1),
(24, '【doctrine】基本的curd操作', '基本的curd操作', NULL, '2018-07-09 14:37:54', NULL, '<p>1、插入数据库</p><pre><code>$entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n$article = new Article();\r\n$article-&gt;setTitle(\'...\');\r\n$article-&gt;setContent(\'...\');\r\n// tell Doctrine you want to (eventually) save the Product (no queries yet)\r\n$entityManager-&gt;persist($article);\r\n// actually executes the queries (i.e. the INSERT query)\r\n$entityManager-&gt;flush();</code></pre><p>2、读取</p><pre><code>$repository = $this-&gt;getDoctrine()-&gt;getRepository(Article:class);\r\n$article = $repository-&gt;find($id); //通过主键查找\r\n$article = $repository-&gt;findOneBy([\'username\'=&gt;\'admin\',\'email\'=&gt;\'40@qq.com\']); //\r\n$article = $repository-&gt;findBy([\'username\'=&gt;\'admin\',\'email\'=&gt;\'40@qq.com\'],[\'id\'=&gt;\'DESC\']); // 查找符合条件的并排序\r\n$article = $repository-&gt;findAll(); //查找所有\r\nif(!$article){\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw $this-&gt;createNotFoundException(\'not found\');\r\n}\r\n\r\n//自动提取对象 注入方式\r\n/**\r\n*@Route(\'/show/{id}\')\r\n*/\r\npublic function show(Article $article){\r\n&nbsp;&nbsp;return $this-&gt;render(\'show.html.twig\',[\'article\'=&gt;$article]);\r\n}</code></pre><p>3、更新对象</p><pre><code>$entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n$repository = $entityManager-&gt;getRepository(Article::class);\r\n$article = $repository-&gt;find($id);\r\n$article-&gt;setStatus(false);\r\n$entityManager-&gt;flush(); \r\n//此时无需声明 $entityManager-&gt;persist($article);</code></pre><p>4、删除对象</p><pre><code>$entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n$article = $entityManager-&gt;getRepository(Article::class)-&gt;find($id);\r\n$eneityManager-&gt;remove($article);\r\n$entityManager-&gt;flush();</code></pre>', 1, 0, 1, 1),
(25, '【doctrine】查询对象：repository', '查询对象：repository', NULL, '2018-07-09 15:05:36', NULL, '<p>上一节已经了解了基本的curd，但是如果进行更为复杂的查询呢？在<font><font>使用生成实体时&nbsp;</font></font><code class=\"notranslate\">make:entity</code><font><font>，该命令</font></font><font><font>还会</font></font><font><font>生成一个</font></font><code class=\"notranslate\">ProductRepository</code><font><font>类：</font></font></p><pre><code>public function findAllGreaterThanPrice($price)\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;$queryBuilder = $this-&gt;createQueryBuilder(\'p\')\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;andWhere(\'p.price &gt; :price\')\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;setParameter(\'price\',$price)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;orderBy(\'p.id\',\'DESC\')\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;getQuery();\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;return $queryBuilder-&gt;execute();\r\n}</code></pre><p>本站的一些repository查询</p><pre><code>//找前一篇文章\r\npublic function findOnePrevArticle($id)\r\n{\r\n	return $this-&gt;createQueryBuilder(\'a\')\r\n		-&gt;andWhere(\'a.id &lt; :id\')\r\n		-&gt;setParameter(\'id\',$id)\r\n		-&gt;orderBy(\'a.id\',\'DESC\')\r\n		-&gt;select(\'a.id,a.title\')\r\n		-&gt;setMaxResults(1)\r\n		-&gt;getQuery()\r\n		-&gt;getOneOrNullResult();\r\n}\r\n//通过标签名字找文章\r\n&nbsp; &nbsp; public function dd($name)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $query = $this-&gt;getEntityManager()\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;createQuery(\'\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SELECT p, t\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM App:Article p&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LEFT JOIN p.tags t\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WHERE t.name =:name\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \')-&gt;setParameter(\'name\',$name);\r\n&nbsp; &nbsp; &nbsp; &nbsp; return&nbsp; $query;\r\n&nbsp; &nbsp; }\r\n//最新的10篇文章\r\n&nbsp; &nbsp; public function getLastest($num)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;createQueryBuilder(\'a\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;orderBy(\'a.id\',\'DESC\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setMaxResults($num)\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;select(\'a.id,a.title\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getQuery()\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;getResult();\r\n&nbsp; &nbsp; }\r\n<br></code></pre><p>使用DQL or SQL查询</p><pre><code>public function findAllGreaterThanPrice($price): array\r\n{\r\n    $entityManager = $this-&gt;getEntityManager();\r\n\r\n    $query = $entityManager-&gt;createQuery(\r\n        \'SELECT p\r\n        FROM App\\Entity\\Product p\r\n        WHERE p.price &gt; :price\r\n        ORDER BY p.price ASC\'\r\n    )-&gt;setParameter(\'price\', 1000);\r\n\r\n    // returns an array of Product objects\r\n    return $query-&gt;execute();\r\n}<br></code></pre><p>或直接使用SQL</p><pre><code>// src/Repository/ProductRepository.php\r\n// ...\r\n\r\npublic function findAllGreaterThanPrice($price): array\r\n{\r\n    $conn = $this-&gt;getEntityManager()-&gt;getConnection();\r\n\r\n    $sql = \'\r\n        SELECT * FROM product p\r\n        WHERE p.price &gt; :price\r\n        ORDER BY p.price ASC\r\n        \';\r\n    $stmt = $conn-&gt;prepare($sql);\r\n    $stmt-&gt;execute([\'price\' =&gt; 1000]);\r\n\r\n    // returns an array of arrays (i.e. a raw data set)\r\n    return $stmt-&gt;fetchAll();\r\n}<br></code></pre>', 1, 0, 1, 1);
INSERT INTO `article` (`id`, `title`, `descript`, `thumb`, `created_at`, `updated_at`, `content`, `category_id`, `views`, `is_comment`, `status`) VALUES
(26, '【doctrine】关联', 'ManyToOne,ManyToMany', NULL, '2018-07-09 15:37:55', NULL, '<p>ManyToOne</p><p><font><font>首先创建一个</font></font><code class=\"notranslate\">Category</code><font><font>包含</font></font><code class=\"notranslate\">name</code><font><font>字段</font><font>的</font><font>实体</font></font><br></p><pre><code>&nbsp;php bin/console make:entity Category\r\n\r\n&nbsp;to stop adding fields):\r\n&gt; name\r\n\r\nField type (enter ? to see all types) [string]:\r\n&gt; string\r\n\r\nField length [255]:\r\n&gt; 255\r\n\r\nCan this field be null in the database (nullable) (yes/no) [no]:\r\n&gt; no\r\n\r\n&nbsp;to stop adding fields):\r\n&gt;\r\n(press enter again to finish)<br></code></pre><p>映射ManyToOne关系</p><p style=\"margin-left: 0px;\"><font>在此示例中，每个类别可以与</font>许多<font><font>产品</font><font>相关联</font><font>。</font><font>但是，每个产品只能与</font></font>一个<font><font>类别</font><font>相关联</font><font>。</font><font>这种关系可以概括为：</font></font>许多<font>产品属于</font>一个<font>类别（或等效地，&nbsp;</font>一个<font>类别到</font>多个<font>产品）。</font></p><p style=\"margin-left: 0px;\"><font>从</font><code class=\"notranslate\">Product</code><font><font>实体</font><font>的角度来看</font><font>，这是一种多对一的关系。</font><font>从</font></font><code class=\"notranslate\">Category</code><font><font>实体</font><font>的角度来看</font><font>，这是一对多的关系。</font></font></p><p style=\"margin-left: 0px;\"><font><font>要映射它，首先</font><font>使用</font><font>注释</font></font><code class=\"notranslate\">category</code><font>在</font><code class=\"notranslate\">Product</code><font><font>类</font><font>上</font><font>创建一个</font><font>属性</font></font><code class=\"notranslate\">ManyToOne</code><font><font>。</font><font>您可以手动执行此操作，也可以使用</font></font><code class=\"notranslate\">make:entity</code><font><font>&nbsp;命令</font><font>执行此操作，该</font><font>命令会向您询问有关您的关系的几个问题。</font><font>如果您不确定答案，请不要担心！</font><font>您可以随时更改设置：</font></font></p><p><br></p><pre><code> php bin/console make:entity\r\n\r\nClass name of the entity to create or update (e.g. BraveChef):\r\n&gt; Product\r\n\r\n to stop adding fields):\r\n&gt; category\r\n\r\nField type (enter ? to see all types) [string]:\r\n&gt; relation\r\n\r\nWhat class should this entity be related to?:\r\n&gt; Category\r\n\r\nRelation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:\r\n&gt; ManyToOne\r\n\r\nIs the Product.category property allowed to be null (nullable)? (yes/no) [yes]:\r\n&gt; no\r\n\r\nDo you want to add a new property to Category so that you can access/update\r\ngetProducts()? (yes/no) [yes]:\r\n&gt; yes\r\n\r\nNew field name inside Category [products]:\r\n&gt; products\r\n\r\nDo you want to automatically delete orphaned App\\Entity\\Product objects\r\n(orphanRemoval)? (yes/no) [no]:\r\n&gt; no\r\n\r\n to stop adding fields):\r\n&gt;\r\n(press enter again to finish)<br></code></pre><p><font><font>这改变了</font></font><font><font>两个</font></font><font><font>变化。</font><font>首先，向</font><font>实体</font><font>添加新</font></font><code class=\"notranslate\">category</code><font><font>属性</font></font><code class=\"notranslate\">Product</code><font><font>（以及getter和setter方法）：</font></font><br></p><pre><code>// src/Entity/Product.php\r\n\r\n// ...\r\nclass Product\r\n{\r\n    // ...\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"App\\Entity\\Category\", inversedBy=\"products\")\r\n     * @ORM\\JoinColumn(nullable=false)\r\n     */\r\n    private $category;\r\n\r\n    public function getCategory(): ?Category\r\n    {\r\n        return $this-&gt;category;\r\n    }\r\n\r\n    public function setCategory(Category $category): self\r\n    {\r\n        $this-&gt;category = $category;\r\n\r\n        return $this;\r\n    }\r\n}\r\n\r\n\r\n<br></code></pre><p style=\"margin-left: 0px;\"><font>此</font><code class=\"notranslate\">ManyToOne</code><font><font>映射是必需的。</font><font>它告诉Doctrine使用</font><font>表</font></font><code class=\"notranslate\">category_id</code><font><font>&nbsp;上</font><font>的</font><font>列将该</font></font><code class=\"notranslate\">product</code><font>表中的每条记录与表中的记录相关联</font><code class=\"notranslate\">category</code><font>。</font></p><p style=\"margin-left: 0px;\"><font>接下来，由于</font>一个&nbsp;<code class=\"notranslate\">Category</code><font>对象将涉及</font>许多&nbsp;<code class=\"notranslate\">Product</code><font>对象，因此该</font><code class=\"notranslate\">make:entity</code><font>命令</font>还<font><font>向</font><font>&nbsp;将保存这些对象</font></font><code class=\"notranslate\">products</code><font>的</font><code class=\"notranslate\">Category</code><font><font>类</font><font>添加了一个</font><font>属性</font><font>：</font></font></p><pre><code>// src/Entity/Category.php\r\n\r\n// ...\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Doctrine\\Common\\Collections\\Collection;\r\n\r\nclass Category\r\n{\r\n    // ...\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=\"App\\Entity\\Product\", mappedBy=\"category\")\r\n     */\r\n    private $products;\r\n\r\n    public function __construct()\r\n    {\r\n        $this-&gt;products = new ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Product[]\r\n     */\r\n    public function getProducts(): Collection\r\n    {\r\n        return $this-&gt;products;\r\n    }\r\n\r\n    // addProduct() and removeProduct() were also added\r\n}<br></code></pre><p><code class=\"notranslate\">ManyToOne</code><font><font>前面显示</font><font>的</font><font>映射是</font></font><font><font>必需的</font></font><font><font>，但是，这</font></font><code class=\"notranslate\">OneToMany</code><font><font>&nbsp;是可选的：只有</font></font><font><font>在</font></font><font><font>您希望能够访问与类别相关的产品</font><font>时才添加它</font><font>（这是问题之一</font></font><code class=\"notranslate\">make:entity</code><font><font>）。</font><font>在这个例子中，这</font></font><font><font>将</font></font><font><font>是有用的能够调用</font></font><code class=\"notranslate\">$category-&gt;getProducts()</code><font><font>。</font><font>如果你不想要它，那么你也不需要</font></font><code class=\"notranslate\">inversedBy</code><font><font>或</font></font><code class=\"notranslate\">mappedBy</code><font><font>&nbsp;配置</font></font><br></p><pre><code>//插入示例\r\nuse App\\Entity\\Category;\r\nuse App\\Entity\\Product;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass ProductController extends Controller\r\n{\r\n    /**\r\n     * @Route(\"/product\", name=\"product\")\r\n     */\r\n    public function index()\r\n    {\r\n        $category = new Category();\r\n        $category-&gt;setName(\'Computer Peripherals\');\r\n\r\n        $product = new Product();\r\n        $product-&gt;setName(\'Keyboard\');\r\n        $product-&gt;setPrice(19.99);\r\n        $product-&gt;setDescription(\'Ergonomic and stylish!\');\r\n\r\n        // relates this product to the category\r\n        $product-&gt;setCategory($category);\r\n\r\n        $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n        $entityManager-&gt;persist($category);\r\n        $entityManager-&gt;persist($product);\r\n        $entityManager-&gt;flush();\r\n\r\n        return new Response(\r\n            \'Saved new product with id: \'.$product-&gt;getId()\r\n            .\' and new category with id: \'.$category-&gt;getId()\r\n        );\r\n    }\r\n}\r\n\r\n//获取相关对象\r\nuse App\\Entity\\Product;\r\n// ...\r\n\r\npublic function show($id)\r\n{\r\n    $product = $this-&gt;getDoctrine()\r\n        -&gt;getRepository(Product::class)\r\n        -&gt;find($id);\r\n\r\n    // ...\r\n\r\n    $categoryName = $product-&gt;getCategory()-&gt;getName();\r\n\r\n    // ...\r\n}\r\npublic function showProducts($id)\r\n{\r\n    $category = $this-&gt;getDoctrine()\r\n        -&gt;getRepository(Category::class)\r\n        -&gt;find($id);\r\n\r\n    $products = $category-&gt;getProducts();\r\n\r\n    // ...\r\n}</code></pre><p><span style=\"color: rgb(227, 55, 55);\">加入相关记录</span></p><p><span style=\"color: rgb(227, 55, 55);\"><font><font>当然，如果您事先知道您需要访问这两个对象，则可以通过在原始查询中发出连接来避免第二个查询。</font><font>将以下方法添加到</font></font><code class=\"notranslate\">ProductRepository</code><font><font>类中：</font></font><br></span></p><pre><code>// src/Repository/ProductRepository.php\r\npublic function findOneByIdJoinedToCategory($productId)\r\n{\r\n    return $this-&gt;createQueryBuilder(\'p\')\r\n        // p.category refers to the \"category\" property on product\r\n        -&gt;innerJoin(\'p.category\', \'c\')\r\n        // selects all the category data to avoid the query\r\n        -&gt;addSelect(\'c\')\r\n        -&gt;andWhere(\'p.id = :id\')\r\n        -&gt;setParameter(\'id\', $productId)\r\n        -&gt;getQuery()\r\n        -&gt;getOneOrNullResult();\r\n}<br></code></pre>', 1, 0, 1, 1),
(27, '【doctrine】如何使用生命周期回调', '如何使用生命周期回调', NULL, '2018-07-09 17:07:24', NULL, '<p style=\"margin-left: 0px;\"><font><font>有时，您需要在插入，更新或删除实体之前或之后执行操作。</font><font>这些类型的操作称为“生命周期”回调，因为它们是您需要在实体生命周期的不同阶段执行的回调方法（例如，插入，更新，删除实体等）。</font></font></p><p style=\"margin-left: 0px;\"><font><font>如果您正在为元数据使用注释，请首先启用生命周期回调。</font><font>如果您使用YAML或XML进行映射，则不需要这样做。</font></font></p><pre><code>/**\r\n * @ORM\\Entity()\r\n * @ORM\\HasLifecycleCallbacks()     //启用\r\n */\r\nclass Product\r\n{\r\n    // ...\r\n}<br></code></pre><p><font><font>现在，您可以告诉Doctrine在任何可用的生命周期事件上执行方法。</font><font>例如，假设您要将</font></font><code class=\"notranslate\">createdAt</code><font><font>日期列设置为当前日期，仅在实体首次持久化（即插入）时：</font></font><br></p><pre><code>// src/Entity/Product.php\r\n\r\n/**\r\n * @ORM\\PrePersist\r\n */\r\npublic function setCreatedAtValue()\r\n{\r\n    $this-&gt;createdAt = new \\DateTime();\r\n}<br></code></pre><p style=\"margin-left: 0px;\"><font>现在，在实体首次持久化之前，Doctrine将自动调用此方法，该</font><code class=\"notranslate\">createdAt</code><font>字段将设置为当前日期。</font></p><p style=\"margin-left: 0px;\"><font><font>您可以使用其他几个生命周期事件。</font><font>有关其他生命周期事件和生命周期回调的更多信息，请参阅Doctrine的</font></font><a href=\"http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#lifecycle-events\">Lifecycle Events文档</a><font>。</font></p>', 1, 0, 1, 1),
(28, '推荐一个免费精确的号码归属地查询接口', '推荐一个免费精确的号码归属地查询接口', NULL, '2018-07-14 16:30:58', NULL, '<p>推荐一个免费精确的号码归属地查询接口</p><pre><code>http://mobsec-dianhua.baidu.com/dianhua_api/open/location?tel=158****3123<br></code></pre><p style=\"margin-left: 0px; text-align: justify;\">是百度开放出来的归属地查询接口，比各个api商店里面的要准确很多，能识别虚拟运营商。</p><p style=\"margin-left: 0px; text-align: justify;\">对比了一下360和sogou搜索的结果，感觉应该都是接入了运营商的数据。</p><p style=\"margin-left: 0px; text-align: justify;\">测试了一下，应该也没限制请求量。</p><p style=\"margin-left: 0px; text-align: justify;\">返回格式如下：</p><pre><code>array(2) {\r\n  [\"response\"] =&gt; array(1) {\r\n    [\"134*******4\"] =&gt; array(2) {\r\n      [\"detail\"] =&gt; array(4) {\r\n        [\"area\"] =&gt; array(1) {\r\n          [0] =&gt; array(1) {\r\n            [\"city\"] =&gt; string(6) \"北京\"\r\n          }\r\n        }\r\n        [\"province\"] =&gt; string(6) \"北京\"\r\n        [\"type\"] =&gt; string(8) \"domestic\"\r\n        [\"operator\"] =&gt; string(6) \"移动\"\r\n      }\r\n      [\"location\"] =&gt; string(18) \"北京北京移动\"\r\n    }\r\n  }\r\n  [\"responseHeader\"] =&gt; array(3) {\r\n    [\"status\"] =&gt; int(200)\r\n    [\"time\"] =&gt; float(1531557017142)\r\n    [\"version\"] =&gt; string(5) \"1.1.0\"\r\n  }\r\n}<br></code></pre><pre><code>function doCurl($url,$type=0,$data=[]){\r\n&nbsp; &nbsp; $data = json_encode($data);\r\n&nbsp; &nbsp; $headers = array();\r\n&nbsp; &nbsp; $headers[] = \'X-Requested-With: XMLHttpRequest\';&nbsp; &nbsp; \r\n&nbsp; &nbsp; $ch = curl_init();\r\n&nbsp; &nbsp; curl_setopt($ch,CURLOPT_URL,$url);\r\n&nbsp; &nbsp; curl_setopt($ch,CURLOPT_HTTPHEADER, $headers);\r\n&nbsp; &nbsp; curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\r\n&nbsp; &nbsp; curl_setopt($ch,CURLOPT_HEADER,0);\r\n&nbsp; &nbsp; if($type ==1){\r\n&nbsp; &nbsp; &nbsp; &nbsp; curl_setopt($ch,CURLOPT_POST,1);\r\n&nbsp; &nbsp; &nbsp; &nbsp; curl_setopt($ch,CURLOPT_POSTFIELDS,$data);\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; $output = curl_exec($ch);\r\n&nbsp; &nbsp; curl_close($ch);\r\n&nbsp; &nbsp; return $output;\r\n}<br></code></pre>', 6, 0, 1, 1),
(29, '【doctrine】Doctrine事件监听器和订阅者', 'Doctrine事件监听器和订阅者', NULL, '2018-07-18 17:20:40', NULL, '<p>第一部分：需求， 我在新增保存对象的时候自动设置产品的创建日期</p><p>流程：</p><p>1，先创建实体</p><p>2，编写控制器操作</p><pre><code>&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/18\r\n&nbsp;* Time: 16:53\r\n&nbsp;*/\r\nnamespace App\\Controller;\r\n\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse App\\Entity\\Product;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\n\r\nclass ProductController extends Controller\r\n{\r\n&nbsp; &nbsp; /**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/add\",name=\"product_add\")\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function add()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $product = new Product();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $product-&gt;setTitle(\'3\');\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entityManager = $this-&gt;getDoctrine()-&gt;getManager();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;persist($product);\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;flush();\r\n&nbsp; &nbsp; &nbsp; &nbsp; return new Response(\'add\');\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p>3，配置监听器 src\\EventListener</p><pre><code>&lt;?php\r\n/**\r\n&nbsp;* Created by PhpStorm.\r\n&nbsp;* User: mash\r\n&nbsp;* Date: 2018/7/18\r\n&nbsp;* Time: 16:59\r\n&nbsp;*/\r\nnamespace&nbsp; App\\EventListener;\r\n\r\nuse Doctrine\\ORM\\Event\\LifecycleEventArgs;\r\nuse App\\Entity\\Product;\r\n\r\nclass SearchIndex\r\n{\r\n&nbsp; &nbsp; public function postPersist(LifecycleEventArgs $args)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entity = $args-&gt;getEntity();\r\n&nbsp; &nbsp; &nbsp; &nbsp; if(!$entity instanceof Product){\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;\r\n&nbsp; &nbsp; &nbsp; &nbsp; }\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entityManager = $args-&gt;getEntityManager();\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entity-&gt;setCreatedAt( new \\DateTime());\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;persist($entity);\r\n&nbsp; &nbsp; &nbsp; &nbsp; $entityManager-&gt;flush();\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p>4、配置服务 src\\service.yaml</p><pre><code>App\\EventListener\\SearchIndex:\r\n&nbsp; &nbsp; &nbsp; &nbsp; tags:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - { name: doctrine.event_listener,event: postPersist}<br></code></pre><blockquote><p>当控制器访问路由/add的时候，会自动把created_at写入数据库；<span style=\"color: rgb(227, 55, 55);\"><font><font>需要注意的一件重要事情是，监听器将监听</font><font>&nbsp;应用程序中的</font></font><font><font>所有</font></font><font><font>实体。</font><font>因此，如果您只对处理特定类型的实体（例如</font></font><code class=\"notranslate\">Product</code><font><font>实体而非</font></font><code class=\"notranslate\">BlogPost</code><font><font>&nbsp;实体）</font><font>感兴趣</font><font>，则应在方法中检查实体的类类型（如上所示）</font></font></span></p></blockquote>', 1, 0, 1, 1),
(30, '【doctrine】如何使用doctrine DBAL', '如何使用Doctrine的DBAL随意查询', NULL, '2018-07-19 13:53:14', NULL, '<blockquote><p style=\"margin-left: 0px;\"><font>可以配置其他东西</font><code class=\"notranslate\">config/packages/doctrine.yaml</code><font><font>。</font><font>有关完整的DBAL配置选项，或了解如何配置多个连接，请参阅</font></font><a href=\"http://symfony.com/doc/current/reference/configuration/doctrine.html#reference-dbal-configuration\">Doctrine DBAL配置</a><font>。</font></p><p style=\"margin-left: 0px;\"><font>然后，您可以通过自动装配</font><code class=\"notranslate\">Connection</code><font><font>&nbsp;对象</font><font>来访问Doctrine DBAL连接</font></font></p></blockquote><p>1、控制器引入</p><pre><code>use Doctrine\\DBAL\\Driver\\Connection;</code></pre><p>2、控制器里使用</p><pre><code>public function dbal_query(Connection $connection)\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;$users = $connection-&gt;fetchAll(\"select * from user\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;dump($users);\r\n&nbsp;&nbsp;&nbsp;&nbsp;array:1 [▼\r\n  &nbsp;&nbsp;&nbsp;&nbsp;0 =&gt; array:4 [▼\r\n&nbsp;&nbsp;&nbsp;&nbsp;    \"id\" =&gt; \"1\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;    \"username\" =&gt; \"mash\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;    \"email\" =&gt; \"402738923@qq.com\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;    \"password\" =&gt; \"$2y$13$NyagpVbwfybbgQTBjcqavuCuo8V.vBD5CKxvmNuzXSLTBBvgI.Pym\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;  ]\r\n&nbsp;&nbsp;&nbsp;&nbsp;]\r\n}</code></pre><p>yes, that\'s all.</p>', 1, 0, 1, 1),
(31, '【doctrine】如何使用多个实体管理器和连接', '您可以在Symfony应用程序中使用多个Doctrine实体管理器或连接。如果您使用不同的数据库甚至是具有完全不同的实体集的供应商，则这是必要的。换句话说，连接到一个数据库的一个实体管理器将处理一些实体，而连接到另一个数据库的另一个实体管理器可以处理其余的实体。', NULL, '2018-07-19 13:59:29', NULL, '<blockquote><p>您可以在Symfony应用程序中使用多个Doctrine实体管理器或连接。如果您使用不同的数据库甚至是具有完全不同的实体集的供应商，则这是必要的。换句话说，连接到一个数据库的一个实体管理器将处理一些实体，而连接到另一个数据库的另一个实体管理器可以处理其余的实体<br></p></blockquote><blockquote><p><font>使用多个实体管理器非常简单，但更高级，通常不需要。</font><font>在添加这一复杂层之前，请确保您确实需要多个实体管理器。</font><br></p></blockquote><p>TODO</p>', 1, 0, 1, 1),
(32, '【doctrine】如何使用PdoSessionHandler在数据库中存储会话', 'session存储数据库', NULL, '2018-07-25 09:13:28', NULL, '<p>1、生成表， 先生成一个空的migration，然后把表内容复制进去，运行migrations:migrate</p><pre><code>//mysql\r\nCREATE TABLE `sessions` (\r\n    `sess_id` VARCHAR(128) NOT NULL PRIMARY KEY,\r\n    `sess_data` BLOB NOT NULL,\r\n    `sess_time` INTEGER UNSIGNED NOT NULL,\r\n    `sess_lifetime` MEDIUMINT NOT NULL\r\n) COLLATE utf8_bin, ENGINE = InnoDB;\r\n</code></pre><p>2、配置服务</p><pre><code>//config/services.yaml\r\nservices:\r\n&nbsp;&nbsp;&nbsp;&nbsp;Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- !service { class: PDO, factory: \'database_connection:getWrappedConnection\' }</code></pre><p>3、接下来，告诉symfony将上面的服务用户会话处理程序</p><pre><code>#config\\packages\\framework.yaml\r\nframework:\r\n&nbsp;&nbsp;&nbsp;&nbsp;session:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_id: Symfony\\Component\\HttpFoundation\\Storage\\Session\\PdoSessionHandler\r\n</code></pre><p>that\'s all</p><p>最后 ，可以在控制器里使用session</p><pre><code>use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\r\npublic function session(Request $request , SessionInterface $session)\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;$session-&gt;set(\'username\',\'mash\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;$username = $session-&gt;get(\'mash\');\r\n&nbsp;&nbsp;&nbsp;&nbsp;dump($username);\r\n&nbsp;&nbsp;&nbsp;&nbsp;return new Response(\'&lt;body&gt;\' . $usernmae . \'&lt;/body&gt;\');\r\n}</code></pre>', 1, 0, 1, 1),
(33, '上传文件', '两种方式上传，一，利用form component上传 二，控制器直接获取请求的file', NULL, '2018-07-29 09:30:44', NULL, '<p>这儿主要说的是如何在控制器里直接获取文件的上传， 目前是无法获得上传文件的后缀，待解决，以下是测试代码</p><pre><code>&nbsp;&nbsp;use Symfony\\Component\\HttpFoundation\\File\\File;&nbsp;&nbsp;\r\n&nbsp;&nbsp;/**\r\n&nbsp; &nbsp; &nbsp;* @Route(\"/upload\" , name=\"upload\" , methods={\"GET\",\"POST\"})\r\n&nbsp; &nbsp; &nbsp;*/\r\n&nbsp; &nbsp; public function upload(Request $request)\r\n&nbsp; &nbsp; {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; if($request-&gt;getMethod() == \'POST\'){\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $file = $request-&gt;files-&gt;get(\'upfile\');\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $uploadedFile = new File($file);\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $uploadedFile-&gt;move(\'./upload\',\'dd.sql\');\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; }\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;render(\'upload.html.twig\');\r\n&nbsp; &nbsp; }\r\n\r\n//如果利用组件可以通过这种方式\r\n$reqest-&gt;get(\'upfile\')-&gt;getData()-&gt;move($dir,$new_filename);</code></pre>', 1, 0, 1, 1),
(34, 'uploadfive上传图片', 'uploadfive上传图片', NULL, '2018-08-07 11:28:04', NULL, '<p>之前的，拿来记录</p><pre><code>&lt;div id=\"queue\"&gt;&lt;/div&gt;\r\n&lt;input type=\"file\" id=\'upload_img\' name=\'upload_img\'  /&gt;\r\n$(\'#upload_img\').uploadifive({\r\n	\'auto\'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: true,\r\n	\'checkScript\'&nbsp; &nbsp; &nbsp; : \'__LIB__uploadfive/check-exists.php\',\r\n	\'formData\'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: {\r\n		\'timestamp\' : \'&lt;?php echo $timestamp;?&gt;\',\r\n		\'token\'&nbsp; &nbsp; &nbsp;: \'&lt;?php echo md5(\'unique_salt\' . $timestamp);?&gt;\'\r\n	},\r\n	\'queueID\'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : \'queue\',\r\n	\'uploadScript\'&nbsp; &nbsp; &nbsp;: \"{:url(\'login/upload\')}\",\r\n	\'fileObjName\'		: \'upload_img\',\r\n	\'multi\'			: false,\r\n	\'fileSizeLimit\'		: 10000,\r\n	\'uploadLimit\' 		: 1,\r\n	\'queueSizeLimit\'&nbsp; 	: 1,\r\n	\'onUploadComplete\' : function(file, data) {\r\n		data = jQuery.parseJSON(data);\r\n		console.log(data);\r\n		if(data.status ==0)\r\n		{\r\n			layer.msg(data.msg+\',请点击取消重新上传\');return false;\r\n		}\r\n		$(\'#image\').prop(\'src\',data.data);\r\n		$(\'#license_image\').val(data.data);\r\n	},\r\n	onCancel : function(file) {\r\n		/* 注意：取消后应重新设置uploadLimit */\r\n		$data&nbsp; &nbsp; = $(this).data(\'uploadifive\'),\r\n			settings = $data.settings;\r\n		settings.uploadLimit++;\r\n	},\r\n\r\n	\'onError\':function(file,fileType,data){\r\n		if(fileType != 0){\r\n			layer.msg(\'图片最大不能超过10M\',{time:2000,icon:7});\r\n		}\r\n	}\r\n});<br></code></pre>', 6, 0, 1, 1),
(35, '高效的PHP邮件发送库：Swiftmailer', '高效的PHP邮件发送库：Swiftmailer', NULL, '2018-08-09 13:10:13', NULL, '<p>Swiftmailer需要PHP 7.0或更高版本，（<code>proc_*</code>函数可用。）</p><h4 style=\"margin-left: 0px;\">安装</h4><p>我们使用Composer来安装Swiftmailer：</p><pre><code>composer <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">require</span> <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\"swiftmailer/swiftmailer:^6.0\"</span>\r\n</code></pre><h4 style=\"margin-left: 0px;\">基本使用</h4><p>只需填写邮箱服务器相关配置，然后填写邮件标题、发送对象和邮件内容，运行即可完成发送邮件任务：</p><pre><code><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">require_once</span> <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'/path/to/vendor/autoload.php\'</span>;\r\n\r\n$transport = (<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">new</span> Swift_SmtpTransport(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'smtp.163.com\'</span>, <span class=\"hljs-number\" style=\"margin: 0px; padding: 0px; color: rgb(0, 128, 128);\">25</span>)) <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">// 邮箱服务器</span>\r\n  -&gt;setUsername(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'your username\'</span>)  <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">// 邮箱用户名</span>\r\n  -&gt;setPassword(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'your password\'</span>)   <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">// 邮箱密码，有的邮件服务器是授权码</span>\r\n;\r\n\r\n$mailer = <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">new</span> Swift_Mailer($transport);\r\n\r\n$message = (<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">new</span> Swift_Message(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'Wonderful Subject\'</span>)) <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">// 邮件标题</span>\r\n  -&gt;setFrom([<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'jyour username\'</span> =&gt; <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'John Doe\'</span>]) <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">// 发送者</span>\r\n  -&gt;setTo([<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'receiver@domain.org\'</span>, <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'other@domain.org\'</span> =&gt; <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'A name\'</span>]) <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">//发送对象，数组形式支持多个</span>\r\n  -&gt;setBody(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'Here is the message itself\'</span>) <span class=\"hljs-comment\" style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 136); font-style: italic;\">//邮件内容</span>\r\n  ;\r\n\r\n$result = $mailer-&gt;send($message);\r\n</code></pre><p>如果发送成功，会返回$result的值为1，即true。</p><h4 style=\"margin-left: 0px;\">高级应用</h4><p>发送邮件时最关键的是创建消息体，在Swift Mailer中创建消息是通过使用库提供的各种MIME实体完成的，因此我们不需要花太多时间去了解如何处理MIME实体，只需拿来使用即可。</p><p>Swift Mailer提供了创建邮件消息的一系列方法，下面列举我们常用到的一些方法：</p><p><code>setSubject()</code>：邮件主题</p><p><code>setFrom()</code>：发件人地址，数组形式，可以是多个发件人</p><p><code>setTo()</code>：收件人地址，数组形式，可以是多个收件人</p><p><code>setBody()</code>：邮件内容</p><p><code>addPart()</code>：邮件内容指定输出类型，支持html内容输出</p><p><code>attach()</code>：添加附件</p><p><code>setCc()</code>：抄送，支持多个邮箱地址</p><p><code>setBcc()</code>：密送，支持多个邮箱地址</p><h4 style=\"margin-left: 0px;\">常见问题</h4><p>1. 报错信息：Fatal error: Uncaught Swift_TransportException: Failed to authenticate on SMTP server with username xxx...</p><p>很显然是邮件服务的账号密码不正确导致验证不能通过。目前163免费邮和QQ邮箱等提供给第三方客户端使用的SMTP/POP等服务需要设置一个授权码，具体可以到邮箱里设置。然后将正确的邮箱账号和授权码配置到Swift Mailer中即可。</p><p>2. 报错信息：PHP Fatal error: Uncaught Swift_TransportException: Connection could not be established with host smtp.163.com</p><p>不能连接上邮件服务器。如果出现这个情况，建议尝试改成ssl协议。笔者在本地使用官方的25端口发送邮件一切正常，到放到公网服务器上就提示如上错误信息了，折腾了好久，改下协议和端口，成功了：</p><pre><code>$transport = (<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">new</span> Swift_SmtpTransport(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(221, 17, 68);\">\'ssl://smtp.163.com\'</span>, <span class=\"hljs-number\" style=\"margin: 0px; padding: 0px; color: rgb(0, 128, 128);\">465</span>))\r\n</code></pre><p>更多有关Swift Mailer的使用请参考官网：<a href=\"https://swiftmailer.symfony.com/\" target=\"_blank\">https://swiftmailer.symfony.com/</a></p>', 1, 0, 1, 1),
(36, '【service】使用服务容器的一个示例', 'siteUpdateManager内需要引入两个服务及一个array参数示例', NULL, '2018-08-10 09:21:32', NULL, '<p>siteUpdateManager代码如下</p><pre><code>&lt;?php\r\nnamespace App\\Updates;\r\nuse App\\Service\\MessageGenerator;\r\n\r\nclass SiteUpdateManager\r\n{\r\n&nbsp; &nbsp; private $messageGenerator;\r\n&nbsp; &nbsp; private $mailer;\r\n&nbsp; &nbsp; private $adminEmail;\r\n&nbsp; &nbsp; private $show;\r\n\r\n&nbsp; &nbsp; public function __construct(MessageGenerator $messageGenerator,\\Swift_Mailer $mailer,array $args)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;messageGenerator = $messageGenerator;\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;mailer = $mailer;\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;adminEmail = $args[\'adminEmail\'];\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;show = $args[\'show\'];\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; public function notifyOfSiteUpdate()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $happyMessage = $this-&gt;messageGenerator-&gt;getHappyMessage();\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp;/*&nbsp; $message = (new \\Swift_Message(\'Site update just happened!\'))\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setFrom(\'admin@example.com\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;setTo(\'402738923@qq.com\')\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;addPart(\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'someone just updated the site . we told them:\' . $happyMessage\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; );\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $this-&gt;mailer-&gt;send($message) &gt; 0; */\r\n&nbsp; &nbsp; &nbsp;&nbsp;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; $transport = (new \\Swift_SmtpTransport(\'smtp.163.com\', 25)) // 邮箱服务器\r\n&nbsp; &nbsp; &nbsp; &nbsp; -&gt;setUsername(\'mash0001@163.com\')&nbsp; // 邮箱用户名\r\n&nbsp; &nbsp; &nbsp; &nbsp; -&gt;setPassword(\'****\')&nbsp; &nbsp;// 邮箱密码，有的邮件服务器是授权码\r\n&nbsp; &nbsp; &nbsp; &nbsp; ;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; $mailer = new \\Swift_Mailer($transport);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; $message = (new \\Swift_Message(\'Wonderful Subject\')) // 邮件标题\r\n&nbsp; &nbsp; &nbsp; &nbsp; -&gt;setFrom([\'mash0001@163.com\' =&gt; \'John Doe\']) // 发送者\r\n&nbsp; &nbsp; &nbsp; &nbsp; //-&gt;setTo([\'402738923@qq.com\', \'other@domain.org\' =&gt; \'A name\']) //发送对象，数组形式支持多个\r\n&nbsp; &nbsp; &nbsp; &nbsp; -&gt;setTo($this-&gt;adminEmail)\r\n&nbsp; &nbsp; &nbsp; &nbsp; -&gt;setBody($this-&gt;show) //邮件内容\r\n&nbsp; &nbsp; &nbsp; &nbsp; ;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $result = $mailer-&gt;send($message);\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p>messageGenerator代码如下</p><pre><code>&lt;?php\r\nnamespace App\\Service;\r\n\r\nuse Psr\\Log\\LoggerInterface;\r\n\r\nclass MessageGenerator\r\n{\r\n&nbsp; &nbsp; private $logger;\r\n&nbsp; &nbsp;&nbsp;\r\n&nbsp; &nbsp; public function __construct(LoggerInterface $logger)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;logger = $logger;&nbsp; &nbsp;\r\n&nbsp; &nbsp; }\r\n&nbsp; &nbsp; public function getHappyMessage()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $message = [\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'message 1\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'message 2\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'message 3\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'message 4\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; ];\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;logger-&gt;info(\'yes inside service\');\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; $index = array_rand($message);\r\n&nbsp; &nbsp; &nbsp; &nbsp; return $message[$index];\r\n&nbsp; &nbsp; }\r\n}<br></code></pre><p>service.yaml配置文件如下</p><pre><code>App\\Updates\\SiteUpdateManager:\r\n&nbsp; &nbsp; &nbsp; &nbsp; arguments:\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $args: {\'adminEmail\':\'%adminEmail%\',\'show\':\'ssfsdf mash\'} #array<br></code></pre>', 1, 0, 1, 1),
(37, '【service】服务方法调用和Setter注入', '服务方法调用和Setter注入', NULL, '2018-08-10 10:00:38', NULL, '<p><font>通常，您需要通过构造函数注入依赖项。</font><font>但有时，特别是如果依赖项是可选的，您可能需要使用“setter injection”。</font><font>例如：</font><br></p><pre><code>namespace App\\Service;\r\n\r\nuse Psr\\Log\\LoggerInterface;\r\n\r\nclass MessageGenerator\r\n{\r\n&nbsp; &nbsp; private $logger;\r\n\r\n&nbsp; &nbsp; public function setLogger(LoggerInterface $logger)\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;logger = $logger;\r\n&nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; // ...\r\n}<br></code></pre><p><font><font>要配置容器以调用</font></font><code class=\"notranslate\">setLogger</code><font><font>方法，请使用</font></font><code class=\"notranslate\">calls</code><font><font>键：</font></font><br></p><pre><code># config/services.yaml\r\nservices:\r\n    App\\Service\\MessageGenerator:\r\n        # ...\r\n        calls:\r\n            - method: setLogger\r\n              arguments:\r\n                  - \'@logger\'<br></code></pre>', 1, 0, 1, 1),
(38, '【form】如何使用表单事件动态修改表单', '如何使用表单事件动态修改表单', NULL, '2018-08-13 10:05:40', NULL, '<p style=\"margin-left: 0px;\"><font><font>详情：<a href=\"http://symfony.com/doc/current/form/dynamic_form_modification.html\">http://symfony.com/doc/current/form/dynamic_form_modification.html</a><br></font></font></p><p style=\"margin-left: 0px;\"><font><font>通常情况下，程序会</font><font>根据三种常见用例自定义表单：</font></font></p><ol><li><p style=\"margin-left: 0px;\"><a href=\"http://symfony.com/doc/current/form/dynamic_form_modification.html#form-events-underlying-data\">根据基础数据自定义表单</a></p><font>示例：您有一个“产品”表单，需要修改/添加/删除字段</font><p style=\"margin-left: 0px;\"><font>基于正在编辑的基础产品的数据（即比如编辑的时候不让编辑用户名）。</font></p></li><li><p style=\"margin-left: 0px;\"><a href=\"http://symfony.com/doc/current/form/dynamic_form_modification.html#form-events-user-data\">如何基于用户数据动态生成表单</a></p><p style=\"margin-left: 0px;\"><font>示例：您创建“朋友消息”表单，并且需要构建一个下拉列表，其中仅包含与</font>当前经过<font><font>身份验证的用户</font><font>成为朋友的</font><font>用户。</font></font></p></li><li><p style=\"margin-left: 0px;\"><a href=\"http://symfony.com/doc/current/form/dynamic_form_modification.html#form-events-submitted-data\">提交表单的动态生成</a></p><p style=\"margin-left: 0px;\"><font>示例：在注册表单上，您有一个“国家/地区”字段和一个“状态”字段，该字段应根据“国家/地区”字段中的值动态填充。</font></p></li></ol><p>第一种处理方式：</p><pre><code>// src/Form/Type/ProductType.php\r\nnamespace App\\Form\\Type;\r\n\r\n// ...\r\nuse Symfony\\Component\\Form\\FormEvent;\r\nuse Symfony\\Component\\Form\\FormEvents;\r\n\r\nclass ProductType extends AbstractType\r\n{\r\n    public function buildForm(FormBuilderInterface $builder, array $options)\r\n    {\r\n        $builder-&gt;add(\'price\');\r\n\r\n        $builder-&gt;addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {\r\n           &nbsp;$product = $event-&gt;getData();\r\n        &nbsp;&nbsp;&nbsp;&nbsp;$form = $event-&gt;getForm();\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;        // checks if the Product object is \"new\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;        // If no data is passed to the form, the data is \"null\".\r\n&nbsp;&nbsp;&nbsp;&nbsp;        // This should be considered a new \"Product\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;        if (!$product || null === $product-&gt;getId()) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;            $form-&gt;add(\'name\', TextType::class);\r\n&nbsp;&nbsp;&nbsp;&nbsp;        }\r\n        });\r\n    }\r\n\r\n    // ...\r\n}<br></code></pre><p>第二种方案：</p><h2><font>如何基于用户数据动态生成表单</font><a href=\"http://symfony.com/doc/current/form/dynamic_form_modification.html#how-to-dynamically-generate-forms-based-on-user-data\"><font><font>¶</font></font></a></h2><p style=\"margin-left: 0px;\"><font><font>有时，您希望动态生成表单不仅基于表单中的数据而且还基于其他内容 - 例如来自当前用户的一些数据。</font><font>假设您有一个社交网站，用户只能在网站上发送标记为朋友的人。</font><font>在这种情况下，消息的“选择列表”应仅包含当前用户的朋友的用户。</font></font></p><h3><font>创建表单类型</font><a href=\"http://symfony.com/doc/current/form/dynamic_form_modification.html#creating-the-form-type\"><font><font>¶</font></font></a></h3><p style=\"margin-left: 0px;\"><font>使用事件监听器，您的表单可能如下所示：</font></p><pre><code>// src/Form/Type/FriendMessageFormType.php\r\nnamespace App\\Form\\Type;\r\n\r\nuse Symfony\\Component\\Form\\AbstractType;\r\nuse Symfony\\Component\\Form\\FormBuilderInterface;\r\nuse Symfony\\Component\\Form\\FormEvents;\r\nuse Symfony\\Component\\Form\\FormEvent;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\r\n\r\nclass FriendMessageFormType extends AbstractType\r\n{\r\n    public function buildForm(FormBuilderInterface $builder, array $options)\r\n    {\r\n        $builder\r\n            -&gt;add(\'subject\', TextType::class)\r\n            -&gt;add(\'body\', TextareaType::class)\r\n        ;\r\n        $builder-&gt;addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {\r\n            // ... add a choice list of friends of the current application user\r\n        });\r\n    }\r\n}<br></code></pre><p><font><font>现在的问题是获取当前用户并创建仅包含该用户的朋友的选择字段。</font><font>这可以将</font></font><code class=\"notranslate\">Security</code><font><font>&nbsp;服务注入表单类型，以便您可以获取当前用户对象：</font></font><br></p><p><font><font>最终的表单类代码如下:</font></font></p><pre><code>// src/Form/Type/FriendMessageFormType.php\r\n\r\nuse App\\Entity\\User;\r\nuse Doctrine\\ORM\\EntityRepository;\r\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\r\nuse Symfony\\Component\\Security\\Core\\Security;\r\n// ...\r\n\r\nclass FriendMessageFormType extends AbstractType\r\n{\r\n    private $security;\r\n\r\n    public function __construct(Security $security)\r\n    {\r\n        $this-&gt;security = $security;\r\n    }\r\n\r\n    public function buildForm(FormBuilderInterface $builder, array $options)\r\n    {\r\n        $builder\r\n            -&gt;add(\'subject\', TextType::class)\r\n            -&gt;add(\'body\', TextareaType::class)\r\n        ;\r\n\r\n        // grab the user, do a quick sanity check that one exists\r\n        $user = $this-&gt;security-&gt;getUser();\r\n        if (!$user) {\r\n            throw new \\LogicException(\r\n                \'The FriendMessageFormType cannot be used without an authenticated user!\'\r\n            );\r\n        }\r\n\r\n        $builder-&gt;addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) use ($user) {\r\n            if (null !== $event-&gt;getData()-&gt;getFriend()) {\r\n                // we don\'t need to add the friend field because\r\n                // the message will be addressed to a fixed friend\r\n                return;\r\n            }\r\n\r\n            $form = $event-&gt;getForm();\r\n\r\n            $formOptions = array(\r\n                \'class\' =&gt; User::class,\r\n                \'choice_label\' =&gt; \'fullName\',\r\n                \'query_builder\' =&gt; function (UserRepository $userRepository) use ($user) {\r\n                    // call a method on your repository that returns the query builder\r\n                    // return $userRepository-&gt;createFriendsQueryBuilder($user);\r\n                },\r\n            );\r\n\r\n            // create the field, this is similar the $builder-&gt;add()\r\n            // field name, field type, field options\r\n            $form-&gt;add(\'friend\', EntityType::class, $formOptions);\r\n        });\r\n    }\r\n\r\n    // ...\r\n}<br></code></pre>', 1, 0, 1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `article_tag`
--

CREATE TABLE `article_tag` (
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `article_tag`
--

INSERT INTO `article_tag` (`article_id`, `tag_id`) VALUES
(1, 1),
(1, 2),
(2, 1),
(2, 2),
(3, 1),
(3, 4),
(4, 7),
(5, 1),
(5, 2),
(6, 1),
(6, 2),
(7, 1),
(7, 2),
(8, 1),
(8, 2),
(9, 1),
(9, 2),
(10, 1),
(10, 2),
(11, 1),
(11, 2),
(12, 1),
(12, 2),
(13, 1),
(13, 2),
(14, 1),
(14, 2),
(15, 1),
(15, 2),
(16, 1),
(16, 2),
(17, 1),
(17, 2),
(18, 1),
(18, 2),
(19, 1),
(19, 2),
(20, 1),
(20, 2),
(21, 1),
(21, 2),
(22, 1),
(22, 2),
(23, 1),
(23, 2),
(24, 1),
(24, 2),
(25, 1),
(25, 2),
(26, 1),
(26, 2),
(27, 1),
(27, 2),
(28, 8),
(29, 1),
(29, 2),
(30, 1),
(30, 2),
(31, 1),
(31, 2),
(32, 1),
(32, 2),
(33, 1),
(33, 2),
(34, 8),
(34, 9),
(35, 1),
(35, 2),
(36, 1),
(36, 2),
(37, 1),
(37, 2),
(38, 1),
(38, 2);

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

CREATE TABLE `category` (
  `id` int(11) NOT NULL,
  `pid` int(11) NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `level` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `category`
--

INSERT INTO `category` (`id`, `pid`, `name`, `created_at`, `level`) VALUES
(1, 0, 'Symfony4', '2018-07-03 08:00:14', 1),
(2, 0, 'Thinkphp5', '2018-07-03 08:00:53', 1),
(3, 0, 'Flask', '2018-07-03 08:01:33', 1),
(4, 0, 'Thinkphp3', '2018-07-03 08:01:55', 1),
(5, 0, 'Redis', '2018-07-05 16:58:18', 1),
(6, 0, '杂项', '2018-07-14 16:28:03', 1);

-- --------------------------------------------------------

--
-- Table structure for table `comment`
--

CREATE TABLE `comment` (
  `id` int(11) NOT NULL,
  `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_at` datetime NOT NULL,
  `article_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `migration_versions`
--

CREATE TABLE `migration_versions` (
  `version` varchar(255) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `migration_versions`
--

INSERT INTO `migration_versions` (`version`) VALUES
('20180702034242'),
('20180702034741'),
('20180702035945'),
('20180702044226'),
('20180702044625'),
('20180702050942'),
('20180702051247');

-- --------------------------------------------------------

--
-- Table structure for table `tag`
--

CREATE TABLE `tag` (
  `id` int(11) NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `tag`
--

INSERT INTO `tag` (`id`, `name`, `created_at`, `status`) VALUES
(1, 'PHP', '2018-07-03 08:06:41', 1),
(2, 'SYMFONY4', '2018-07-03 08:06:54', 1),
(3, 'THINKPHP5', '2018-07-03 08:07:03', 1),
(4, 'THINKPHP3', '2018-07-03 08:07:13', 1),
(5, 'PYTHON', '2018-07-03 08:07:26', 1),
(6, 'FLASK', '2018-07-03 08:07:33', 1),
(7, 'REDIS', '2018-07-05 16:58:27', 1),
(8, '杂项', '2018-07-14 16:28:25', 1),
(9, '插件', '2018-08-07 11:25:12', 1);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `nickname` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `status` tinyint(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_23A0E6612469DE2` (`category_id`);

--
-- Indexes for table `article_tag`
--
ALTER TABLE `article_tag`
  ADD PRIMARY KEY (`article_id`,`tag_id`),
  ADD KEY `IDX_919694F97294869C` (`article_id`),
  ADD KEY `IDX_919694F9BAD26311` (`tag_id`);

--
-- Indexes for table `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_9474526C7294869C` (`article_id`);

--
-- Indexes for table `migration_versions`
--
ALTER TABLE `migration_versions`
  ADD PRIMARY KEY (`version`);

--
-- Indexes for table `tag`
--
ALTER TABLE `tag`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=39;
--
-- AUTO_INCREMENT for table `category`
--
ALTER TABLE `category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `comment`
--
ALTER TABLE `comment`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `tag`
--
ALTER TABLE `tag`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `article`
--
ALTER TABLE `article`
  ADD CONSTRAINT `FK_23A0E6612469DE2` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`);

--
-- Constraints for table `article_tag`
--
ALTER TABLE `article_tag`
  ADD CONSTRAINT `FK_919694F97294869C` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `FK_919694F9BAD26311` FOREIGN KEY (`tag_id`) REFERENCES `tag` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `comment`
--
ALTER TABLE `comment`
  ADD CONSTRAINT `FK_9474526C7294869C` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
